-- SET datestyle=ISO;
-- ===================================================================
-- create FDW objects
-- ===================================================================
CREATE EXTENSION influxdb_fdw;
CREATE SERVER testserver1 FOREIGN DATA WRAPPER influxdb_fdw;
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER influxdb_svr FOREIGN DATA WRAPPER influxdb_fdw
            OPTIONS (dbname 'postdb', host 'http://localhost', port '8086')$$;
        EXECUTE $$CREATE SERVER influxdb_svr2 FOREIGN DATA WRAPPER influxdb_fdw
            OPTIONS (dbname 'postdb', host 'http://localhost', port '8086')$$;
    END;
$d$;
CREATE USER MAPPING FOR public SERVER testserver1 OPTIONS (user 'value', password 'value');
CREATE USER MAPPING FOR CURRENT_USER SERVER influxdb_svr OPTIONS (user 'user', password 'pass');
CREATE USER MAPPING FOR CURRENT_USER SERVER influxdb_svr2 OPTIONS (user 'user', password 'pass');
-- import time column as timestamp and text type
CREATE SCHEMA "S 1";
IMPORT FOREIGN SCHEMA public FROM SERVER influxdb_svr INTO "S 1";
-- ===================================================================
-- create foreign tables
-- ===================================================================
CREATE FOREIGN TABLE ft1 (
	time timestamp,
	c0 int,
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 text
) SERVER influxdb_svr;
ALTER FOREIGN TABLE ft1 DROP COLUMN c0;
CREATE FOREIGN TABLE ft2 (
	time timestamp,
	c1 int NOT NULL,
	c2 int NOT NULL,
	cx int,
	c3 text,
	c6 varchar(10),
	c7 char(10) default 'ft2',
	c8 text
) SERVER influxdb_svr;
ALTER FOREIGN TABLE ft2 DROP COLUMN cx;
CREATE FOREIGN TABLE ft4 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER influxdb_svr OPTIONS (table 'T3');
CREATE FOREIGN TABLE ft5 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER influxdb_svr OPTIONS (table 'T4');
CREATE FOREIGN TABLE ft6 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER influxdb_svr2 OPTIONS (table 'T4');
-- ===================================================================
-- tests for validator
-- ===================================================================
-- requiressl, krbsrvname and gsslib are omitted because they depend on
-- configure options
ALTER SERVER testserver1 OPTIONS (
	dbname 'value',
	host 'value',
	port 'value'
);
ALTER USER MAPPING FOR public SERVER testserver1
	OPTIONS (DROP user, DROP password);
ALTER FOREIGN TABLE ft1 OPTIONS (table 'T1');
ALTER FOREIGN TABLE ft2 OPTIONS (table 'T1');
ALTER FOREIGN TABLE ft1 ALTER COLUMN c1 OPTIONS (column_name 'C1');
ALTER FOREIGN TABLE ft2 ALTER COLUMN c1 OPTIONS (column_name 'C1');
\det+
                    List of foreign tables
 Schema | Table |    Server     |  FDW options   | Description 
--------+-------+---------------+----------------+-------------
 public | ft1   | influxdb_svr  | ("table" 'T1') | 
 public | ft2   | influxdb_svr  | ("table" 'T1') | 
 public | ft4   | influxdb_svr  | ("table" 'T3') | 
 public | ft5   | influxdb_svr  | ("table" 'T4') | 
 public | ft6   | influxdb_svr2 | ("table" 'T4') | 
(5 rows)

SELECT * FROM "S 1"."T1" LIMIT 10;
             time             | C1 | c2 |  c3   | c6 |     c7     | c8  
------------------------------+----+----+-------+----+------------+-----
 Thu Jan 01 16:00:00 1970 PST |  1 |  1 | 00001 | 1  | 1          | foo
 Fri Jan 02 16:00:00 1970 PST |  2 |  2 | 00002 | 2  | 2          | foo
 Sat Jan 03 16:00:00 1970 PST |  3 |  3 | 00003 | 3  | 3          | foo
 Sun Jan 04 16:00:00 1970 PST |  4 |  4 | 00004 | 4  | 4          | foo
 Mon Jan 05 16:00:00 1970 PST |  5 |  5 | 00005 | 5  | 5          | foo
 Tue Jan 06 16:00:00 1970 PST |  6 |  6 | 00006 | 6  | 6          | foo
 Wed Jan 07 16:00:00 1970 PST |  7 |  7 | 00007 | 7  | 7          | foo
 Thu Jan 08 16:00:00 1970 PST |  8 |  8 | 00008 | 8  | 8          | foo
 Fri Jan 09 16:00:00 1970 PST |  9 |  9 | 00009 | 9  | 9          | foo
 Sat Jan 10 16:00:00 1970 PST | 10 |  0 | 00010 | 0  | 0          | foo
(10 rows)

SELECT * FROM ft1 LIMIT 10;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
 Sun Jan 04 00:00:00 1970 |  3 |  3 | 00003 | 3  | 3          | foo
 Mon Jan 05 00:00:00 1970 |  4 |  4 | 00004 | 4  | 4          | foo
 Tue Jan 06 00:00:00 1970 |  5 |  5 | 00005 | 5  | 5          | foo
 Wed Jan 07 00:00:00 1970 |  6 |  6 | 00006 | 6  | 6          | foo
 Thu Jan 08 00:00:00 1970 |  7 |  7 | 00007 | 7  | 7          | foo
 Fri Jan 09 00:00:00 1970 |  8 |  8 | 00008 | 8  | 8          | foo
 Sat Jan 10 00:00:00 1970 |  9 |  9 | 00009 | 9  | 9          | foo
 Sun Jan 11 00:00:00 1970 | 10 |  0 | 00010 | 0  | 0          | foo
(10 rows)

SELECT * FROM ft2 LIMIT 10;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
 Sun Jan 04 00:00:00 1970 |  3 |  3 | 00003 | 3  | 3          | foo
 Mon Jan 05 00:00:00 1970 |  4 |  4 | 00004 | 4  | 4          | foo
 Tue Jan 06 00:00:00 1970 |  5 |  5 | 00005 | 5  | 5          | foo
 Wed Jan 07 00:00:00 1970 |  6 |  6 | 00006 | 6  | 6          | foo
 Thu Jan 08 00:00:00 1970 |  7 |  7 | 00007 | 7  | 7          | foo
 Fri Jan 09 00:00:00 1970 |  8 |  8 | 00008 | 8  | 8          | foo
 Sat Jan 10 00:00:00 1970 |  9 |  9 | 00009 | 9  | 9          | foo
 Sun Jan 11 00:00:00 1970 | 10 |  0 | 00010 | 0  | 0          | foo
(10 rows)

SELECT * FROM ft4 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
  2 |  3 | AAA002
  4 |  5 | AAA004
  6 |  7 | AAA006
  8 |  9 | AAA008
 10 | 11 | AAA010
 12 | 13 | AAA012
 14 | 15 | AAA014
 16 | 17 | AAA016
 18 | 19 | AAA018
 20 | 21 | AAA020
(10 rows)

SELECT * FROM ft5 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
  3 |  4 | AAA003
  6 |  7 | AAA006
  9 | 10 | AAA009
 12 | 13 | AAA012
 15 | 16 | AAA015
 18 | 19 | AAA018
 21 | 22 | AAA021
 24 | 25 | AAA024
 27 | 28 | AAA027
 30 | 31 | AAA030
(10 rows)

SELECT * FROM ft6 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
  3 |  4 | AAA003
  6 |  7 | AAA006
  9 | 10 | AAA009
 12 | 13 | AAA012
 15 | 16 | AAA015
 18 | 19 | AAA018
 21 | 22 | AAA021
 24 | 25 | AAA024
 27 | 28 | AAA027
 30 | 31 | AAA030
(10 rows)

-- Test that alteration of server options causes reconnection
-- Remote's errors might be non-English, so hide them to ensure stable results
\set VERBOSITY terse
SELECT c3, time FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work
  c3   |           time           
-------+--------------------------
 00001 | Fri Jan 02 00:00:00 1970
(1 row)

ALTER SERVER influxdb_svr OPTIONS (SET dbname 'no such database');
SELECT c3, time FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
ERROR:  influxdb_fdw : database not found: no such database
DO $d$
    BEGIN
        EXECUTE $$ALTER SERVER influxdb_svr
            OPTIONS (SET dbname 'postdb')$$;
    END;
$d$;
SELECT c3, time FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
  c3   |           time           
-------+--------------------------
 00001 | Fri Jan 02 00:00:00 1970
(1 row)

-- Test that alteration of user mapping options causes reconnection
ALTER USER MAPPING FOR CURRENT_USER SERVER influxdb_svr
  OPTIONS (ADD user 'no such user');               -- error
ERROR:  option "user" provided more than once
SELECT c3, time FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work
  c3   |           time           
-------+--------------------------
 00001 | Fri Jan 02 00:00:00 1970
(1 row)

ALTER USER MAPPING FOR CURRENT_USER SERVER influxdb_svr
  OPTIONS (DROP user);
SELECT c3, time FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work
  c3   |           time           
-------+--------------------------
 00001 | Fri Jan 02 00:00:00 1970
(1 row)

\set VERBOSITY default
-- ===================================================================
-- simple queries
-- ===================================================================
-- single table without alias
EXPLAIN (COSTS OFF) SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
           QUERY PLAN            
---------------------------------
 Limit
   ->  Sort
         Sort Key: c3, c1
         ->  Foreign Scan on ft1
(4 rows)

SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Sun Apr 12 00:00:00 1970 | 101 |  1 | 00101 | 1  | 1          | foo
 Mon Apr 13 00:00:00 1970 | 102 |  2 | 00102 | 2  | 2          | foo
 Tue Apr 14 00:00:00 1970 | 103 |  3 | 00103 | 3  | 3          | foo
 Wed Apr 15 00:00:00 1970 | 104 |  4 | 00104 | 4  | 4          | foo
 Thu Apr 16 00:00:00 1970 | 105 |  5 | 00105 | 5  | 5          | foo
 Fri Apr 17 00:00:00 1970 | 106 |  6 | 00106 | 6  | 6          | foo
 Sat Apr 18 00:00:00 1970 | 107 |  7 | 00107 | 7  | 7          | foo
 Sun Apr 19 00:00:00 1970 | 108 |  8 | 00108 | 8  | 8          | foo
 Mon Apr 20 00:00:00 1970 | 109 |  9 | 00109 | 9  | 9          | foo
 Tue Apr 21 00:00:00 1970 | 110 |  0 | 00110 | 0  | 0          | foo
(10 rows)

-- single table with alias - also test that tableoid sort is not pushed to remote side
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: "time", c1, c2, c3, c6, c7, c8, tableoid
   ->  Sort
         Output: "time", c1, c2, c3, c6, c7, c8, tableoid
         Sort Key: t1.c3, t1.c1, t1.tableoid
         ->  Foreign Scan on public.ft1 t1
               Output: "time", c1, c2, c3, c6, c7, c8, tableoid
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(8 rows)

SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Sun Apr 12 00:00:00 1970 | 101 |  1 | 00101 | 1  | 1          | foo
 Mon Apr 13 00:00:00 1970 | 102 |  2 | 00102 | 2  | 2          | foo
 Tue Apr 14 00:00:00 1970 | 103 |  3 | 00103 | 3  | 3          | foo
 Wed Apr 15 00:00:00 1970 | 104 |  4 | 00104 | 4  | 4          | foo
 Thu Apr 16 00:00:00 1970 | 105 |  5 | 00105 | 5  | 5          | foo
 Fri Apr 17 00:00:00 1970 | 106 |  6 | 00106 | 6  | 6          | foo
 Sat Apr 18 00:00:00 1970 | 107 |  7 | 00107 | 7  | 7          | foo
 Sun Apr 19 00:00:00 1970 | 108 |  8 | 00108 | 8  | 8          | foo
 Mon Apr 20 00:00:00 1970 | 109 |  9 | 00109 | 9  | 9          | foo
 Tue Apr 21 00:00:00 1970 | 110 |  0 | 00110 | 0  | 0          | foo
(10 rows)

-- whole-row reference
EXPLAIN (VERBOSE, COSTS OFF) SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: t1.*, c3, c1
   ->  Sort
         Output: t1.*, c3, c1
         Sort Key: t1.c3, t1.c1
         ->  Foreign Scan on public.ft1 t1
               Output: t1.*, c3, c1
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(8 rows)

SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                             t1                              
-------------------------------------------------------------
 ("Sun Apr 12 00:00:00 1970",101,1,00101,1,"1         ",foo)
 ("Mon Apr 13 00:00:00 1970",102,2,00102,2,"2         ",foo)
 ("Tue Apr 14 00:00:00 1970",103,3,00103,3,"3         ",foo)
 ("Wed Apr 15 00:00:00 1970",104,4,00104,4,"4         ",foo)
 ("Thu Apr 16 00:00:00 1970",105,5,00105,5,"5         ",foo)
 ("Fri Apr 17 00:00:00 1970",106,6,00106,6,"6         ",foo)
 ("Sat Apr 18 00:00:00 1970",107,7,00107,7,"7         ",foo)
 ("Sun Apr 19 00:00:00 1970",108,8,00108,8,"8         ",foo)
 ("Mon Apr 20 00:00:00 1970",109,9,00109,9,"9         ",foo)
 ("Tue Apr 21 00:00:00 1970",110,0,00110,0,"0         ",foo)
(10 rows)

-- empty result
SELECT * FROM ft1 WHERE false;
 time | c1 | c2 | c3 | c6 | c7 | c8 
------+----+----+----+----+----+----
(0 rows)

-- with WHERE clause
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c7" >= '1')) AND (("C1" = 101)) AND (("c6" = '1'))
(3 rows)

SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
 time | c1 | c2 | c3 | c6 | c7 | c8 
------+----+----+----+----+----+----
(0 rows)

-- with FOR UPDATE/SHARE
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 LockRows
   Output: "time", c1, c2, c3, c6, c7, c8, t1.*
   ->  Foreign Scan on public.ft1 t1
         Output: "time", c1, c2, c3, c6, c7, c8, t1.*
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 101))
(5 rows)

SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Sun Apr 12 00:00:00 1970 | 101 |  1 | 00101 | 1  | 1          | foo
(1 row)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 LockRows
   Output: "time", c1, c2, c3, c6, c7, c8, t1.*
   ->  Foreign Scan on public.ft1 t1
         Output: "time", c1, c2, c3, c6, c7, c8, t1.*
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 102))
(5 rows)

SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Mon Apr 13 00:00:00 1970 | 102 |  2 | 00102 | 2  | 2          | foo
(1 row)

-- aggregate
SELECT COUNT(*) FROM ft1 t1;
 count 
-------
  1000
(1 row)

-- subquery
SELECT * FROM ft1 t1 WHERE t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 <= 10) ORDER BY c1;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
 Sun Jan 04 00:00:00 1970 |  3 |  3 | 00003 | 3  | 3          | foo
 Mon Jan 05 00:00:00 1970 |  4 |  4 | 00004 | 4  | 4          | foo
 Tue Jan 06 00:00:00 1970 |  5 |  5 | 00005 | 5  | 5          | foo
 Wed Jan 07 00:00:00 1970 |  6 |  6 | 00006 | 6  | 6          | foo
 Thu Jan 08 00:00:00 1970 |  7 |  7 | 00007 | 7  | 7          | foo
 Fri Jan 09 00:00:00 1970 |  8 |  8 | 00008 | 8  | 8          | foo
 Sat Jan 10 00:00:00 1970 |  9 |  9 | 00009 | 9  | 9          | foo
 Sun Jan 11 00:00:00 1970 | 10 |  0 | 00010 | 0  | 0          | foo
(10 rows)

-- subquery+MAX
-- TODO
-- SELECT * FROM ft1 t1 WHERE t1.c3 = (SELECT MAX(c3) FROM ft2 t2) ORDER BY c1;
SELECT * FROM ft1 t1 WHERE t1.c2 = (SELECT MAX(c2) FROM ft2 t2) ORDER BY c1;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Sat Jan 10 00:00:00 1970 |   9 |  9 | 00009 | 9  | 9          | foo
 Tue Jan 20 00:00:00 1970 |  19 |  9 | 00019 | 9  | 9          | foo
 Fri Jan 30 00:00:00 1970 |  29 |  9 | 00029 | 9  | 9          | foo
 Mon Feb 09 00:00:00 1970 |  39 |  9 | 00039 | 9  | 9          | foo
 Thu Feb 19 00:00:00 1970 |  49 |  9 | 00049 | 9  | 9          | foo
 Sun Mar 01 00:00:00 1970 |  59 |  9 | 00059 | 9  | 9          | foo
 Wed Mar 11 00:00:00 1970 |  69 |  9 | 00069 | 9  | 9          | foo
 Sat Mar 21 00:00:00 1970 |  79 |  9 | 00079 | 9  | 9          | foo
 Tue Mar 31 00:00:00 1970 |  89 |  9 | 00089 | 9  | 9          | foo
 Fri Apr 10 00:00:00 1970 |  99 |  9 | 00099 | 9  | 9          | foo
 Mon Apr 20 00:00:00 1970 | 109 |  9 | 00109 | 9  | 9          | foo
 Thu Apr 30 00:00:00 1970 | 119 |  9 | 00119 | 9  | 9          | foo
 Sun May 10 00:00:00 1970 | 129 |  9 | 00129 | 9  | 9          | foo
 Wed May 20 00:00:00 1970 | 139 |  9 | 00139 | 9  | 9          | foo
 Sat May 30 00:00:00 1970 | 149 |  9 | 00149 | 9  | 9          | foo
 Tue Jun 09 00:00:00 1970 | 159 |  9 | 00159 | 9  | 9          | foo
 Fri Jun 19 00:00:00 1970 | 169 |  9 | 00169 | 9  | 9          | foo
 Mon Jun 29 00:00:00 1970 | 179 |  9 | 00179 | 9  | 9          | foo
 Thu Jul 09 00:00:00 1970 | 189 |  9 | 00189 | 9  | 9          | foo
 Sun Jul 19 00:00:00 1970 | 199 |  9 | 00199 | 9  | 9          | foo
 Wed Jul 29 00:00:00 1970 | 209 |  9 | 00209 | 9  | 9          | foo
 Sat Aug 08 00:00:00 1970 | 219 |  9 | 00219 | 9  | 9          | foo
 Tue Aug 18 00:00:00 1970 | 229 |  9 | 00229 | 9  | 9          | foo
 Fri Aug 28 00:00:00 1970 | 239 |  9 | 00239 | 9  | 9          | foo
 Mon Sep 07 00:00:00 1970 | 249 |  9 | 00249 | 9  | 9          | foo
 Thu Sep 17 00:00:00 1970 | 259 |  9 | 00259 | 9  | 9          | foo
 Sun Sep 27 00:00:00 1970 | 269 |  9 | 00269 | 9  | 9          | foo
 Wed Oct 07 00:00:00 1970 | 279 |  9 | 00279 | 9  | 9          | foo
 Sat Oct 17 00:00:00 1970 | 289 |  9 | 00289 | 9  | 9          | foo
 Tue Oct 27 00:00:00 1970 | 299 |  9 | 00299 | 9  | 9          | foo
 Fri Nov 06 00:00:00 1970 | 309 |  9 | 00309 | 9  | 9          | foo
 Mon Nov 16 00:00:00 1970 | 319 |  9 | 00319 | 9  | 9          | foo
 Thu Nov 26 00:00:00 1970 | 329 |  9 | 00329 | 9  | 9          | foo
 Sun Dec 06 00:00:00 1970 | 339 |  9 | 00339 | 9  | 9          | foo
 Wed Dec 16 00:00:00 1970 | 349 |  9 | 00349 | 9  | 9          | foo
 Sat Dec 26 00:00:00 1970 | 359 |  9 | 00359 | 9  | 9          | foo
 Tue Jan 05 00:00:00 1971 | 369 |  9 | 00369 | 9  | 9          | foo
 Fri Jan 15 00:00:00 1971 | 379 |  9 | 00379 | 9  | 9          | foo
 Mon Jan 25 00:00:00 1971 | 389 |  9 | 00389 | 9  | 9          | foo
 Thu Feb 04 00:00:00 1971 | 399 |  9 | 00399 | 9  | 9          | foo
 Sun Feb 14 00:00:00 1971 | 409 |  9 | 00409 | 9  | 9          | foo
 Wed Feb 24 00:00:00 1971 | 419 |  9 | 00419 | 9  | 9          | foo
 Sat Mar 06 00:00:00 1971 | 429 |  9 | 00429 | 9  | 9          | foo
 Tue Mar 16 00:00:00 1971 | 439 |  9 | 00439 | 9  | 9          | foo
 Fri Mar 26 00:00:00 1971 | 449 |  9 | 00449 | 9  | 9          | foo
 Mon Apr 05 00:00:00 1971 | 459 |  9 | 00459 | 9  | 9          | foo
 Thu Apr 15 00:00:00 1971 | 469 |  9 | 00469 | 9  | 9          | foo
 Sun Apr 25 00:00:00 1971 | 479 |  9 | 00479 | 9  | 9          | foo
 Wed May 05 00:00:00 1971 | 489 |  9 | 00489 | 9  | 9          | foo
 Sat May 15 00:00:00 1971 | 499 |  9 | 00499 | 9  | 9          | foo
 Tue May 25 00:00:00 1971 | 509 |  9 | 00509 | 9  | 9          | foo
 Fri Jun 04 00:00:00 1971 | 519 |  9 | 00519 | 9  | 9          | foo
 Mon Jun 14 00:00:00 1971 | 529 |  9 | 00529 | 9  | 9          | foo
 Thu Jun 24 00:00:00 1971 | 539 |  9 | 00539 | 9  | 9          | foo
 Sun Jul 04 00:00:00 1971 | 549 |  9 | 00549 | 9  | 9          | foo
 Wed Jul 14 00:00:00 1971 | 559 |  9 | 00559 | 9  | 9          | foo
 Sat Jul 24 00:00:00 1971 | 569 |  9 | 00569 | 9  | 9          | foo
 Tue Aug 03 00:00:00 1971 | 579 |  9 | 00579 | 9  | 9          | foo
 Fri Aug 13 00:00:00 1971 | 589 |  9 | 00589 | 9  | 9          | foo
 Mon Aug 23 00:00:00 1971 | 599 |  9 | 00599 | 9  | 9          | foo
 Thu Sep 02 00:00:00 1971 | 609 |  9 | 00609 | 9  | 9          | foo
 Sun Sep 12 00:00:00 1971 | 619 |  9 | 00619 | 9  | 9          | foo
 Wed Sep 22 00:00:00 1971 | 629 |  9 | 00629 | 9  | 9          | foo
 Sat Oct 02 00:00:00 1971 | 639 |  9 | 00639 | 9  | 9          | foo
 Tue Oct 12 00:00:00 1971 | 649 |  9 | 00649 | 9  | 9          | foo
 Fri Oct 22 00:00:00 1971 | 659 |  9 | 00659 | 9  | 9          | foo
 Mon Nov 01 00:00:00 1971 | 669 |  9 | 00669 | 9  | 9          | foo
 Thu Nov 11 00:00:00 1971 | 679 |  9 | 00679 | 9  | 9          | foo
 Sun Nov 21 00:00:00 1971 | 689 |  9 | 00689 | 9  | 9          | foo
 Wed Dec 01 00:00:00 1971 | 699 |  9 | 00699 | 9  | 9          | foo
 Sat Dec 11 00:00:00 1971 | 709 |  9 | 00709 | 9  | 9          | foo
 Tue Dec 21 00:00:00 1971 | 719 |  9 | 00719 | 9  | 9          | foo
 Fri Dec 31 00:00:00 1971 | 729 |  9 | 00729 | 9  | 9          | foo
 Mon Jan 10 00:00:00 1972 | 739 |  9 | 00739 | 9  | 9          | foo
 Thu Jan 20 00:00:00 1972 | 749 |  9 | 00749 | 9  | 9          | foo
 Sun Jan 30 00:00:00 1972 | 759 |  9 | 00759 | 9  | 9          | foo
 Wed Feb 09 00:00:00 1972 | 769 |  9 | 00769 | 9  | 9          | foo
 Sat Feb 19 00:00:00 1972 | 779 |  9 | 00779 | 9  | 9          | foo
 Tue Feb 29 00:00:00 1972 | 789 |  9 | 00789 | 9  | 9          | foo
 Fri Mar 10 00:00:00 1972 | 799 |  9 | 00799 | 9  | 9          | foo
 Mon Mar 20 00:00:00 1972 | 809 |  9 | 00809 | 9  | 9          | foo
 Thu Mar 30 00:00:00 1972 | 819 |  9 | 00819 | 9  | 9          | foo
 Sun Apr 09 00:00:00 1972 | 829 |  9 | 00829 | 9  | 9          | foo
 Wed Apr 19 00:00:00 1972 | 839 |  9 | 00839 | 9  | 9          | foo
 Sat Apr 29 00:00:00 1972 | 849 |  9 | 00849 | 9  | 9          | foo
 Tue May 09 00:00:00 1972 | 859 |  9 | 00859 | 9  | 9          | foo
 Fri May 19 00:00:00 1972 | 869 |  9 | 00869 | 9  | 9          | foo
 Mon May 29 00:00:00 1972 | 879 |  9 | 00879 | 9  | 9          | foo
 Thu Jun 08 00:00:00 1972 | 889 |  9 | 00889 | 9  | 9          | foo
 Sun Jun 18 00:00:00 1972 | 899 |  9 | 00899 | 9  | 9          | foo
 Wed Jun 28 00:00:00 1972 | 909 |  9 | 00909 | 9  | 9          | foo
 Sat Jul 08 00:00:00 1972 | 919 |  9 | 00919 | 9  | 9          | foo
 Tue Jul 18 00:00:00 1972 | 929 |  9 | 00929 | 9  | 9          | foo
 Fri Jul 28 00:00:00 1972 | 939 |  9 | 00939 | 9  | 9          | foo
 Mon Aug 07 00:00:00 1972 | 949 |  9 | 00949 | 9  | 9          | foo
 Thu Aug 17 00:00:00 1972 | 959 |  9 | 00959 | 9  | 9          | foo
 Sun Aug 27 00:00:00 1972 | 969 |  9 | 00969 | 9  | 9          | foo
 Wed Sep 06 00:00:00 1972 | 979 |  9 | 00979 | 9  | 9          | foo
 Sat Sep 16 00:00:00 1972 | 989 |  9 | 00989 | 9  | 9          | foo
 Tue Sep 26 00:00:00 1972 | 999 |  9 | 00999 | 9  | 9          | foo
(100 rows)

-- used in CTE
WITH t1 AS (SELECT * FROM ft1 WHERE c1 <= 10) SELECT t2.c1, t2.c2, t2.c3, t2.time FROM t1, ft2 t2 WHERE t1.c1 = t2.c1 ORDER BY t1.c1;
 c1 | c2 |  c3   |           time           
----+----+-------+--------------------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970
(10 rows)

-- fixed values
SELECT 'fixed', NULL FROM ft1 t1 WHERE c1 = 1;
 ?column? | ?column? 
----------+----------
 fixed    | 
(1 row)

-- Test forcing the remote server to produce sorted data for a merge join.
SET enable_hashjoin TO false;
SET enable_nestloop TO false;
-- inner join; expressions in the clauses appear in the equivalence class list
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C1" FROM ft2 t1 JOIN "S 1"."T1" t2 ON (t1.c1 = t2."C1") OFFSET 100 LIMIT 10;
                        QUERY PLAN                         
-----------------------------------------------------------
 Limit
   Output: t1.c1, t2."C1"
   ->  Merge Join
         Output: t1.c1, t2."C1"
         Merge Cond: (t2."C1" = t1.c1)
         ->  Sort
               Output: t2."C1"
               Sort Key: t2."C1"
               ->  Foreign Scan on "S 1"."T1" t2
                     Output: t2."C1"
                     InfluxDB query: SELECT "C1" FROM "T1"
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
(17 rows)

SELECT t1.c1, t2."C1" FROM ft2 t1 JOIN "S 1"."T1" t2 ON (t1.c1 = t2."C1") OFFSET 100 LIMIT 10;
 c1  | C1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C1" FROM ft2 t1 LEFT JOIN "S 1"."T1" t2 ON (t1.c1 = t2."C1") OFFSET 100 LIMIT 10;
                        QUERY PLAN                         
-----------------------------------------------------------
 Limit
   Output: t1.c1, t2."C1"
   ->  Merge Right Join
         Output: t1.c1, t2."C1"
         Merge Cond: (t2."C1" = t1.c1)
         ->  Sort
               Output: t2."C1"
               Sort Key: t2."C1"
               ->  Foreign Scan on "S 1"."T1" t2
                     Output: t2."C1"
                     InfluxDB query: SELECT "C1" FROM "T1"
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
(17 rows)

SELECT t1.c1, t2."C1" FROM ft2 t1 LEFT JOIN "S 1"."T1" t2 ON (t1.c1 = t2."C1") OFFSET 100 LIMIT 10;
 c1  | C1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- A join between local table and foreign join. ORDER BY clause is added to the
-- foreign join so that the local table can be joined using merge join strategy.
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C1" FROM "S 1"."T1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C1") OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1."C1"
   ->  Merge Left Join
         Output: t1."C1"
         Merge Cond: (t1."C1" = t3.c1)
         ->  Sort
               Output: t1."C1"
               Sort Key: t1."C1"
               ->  Foreign Scan on "S 1"."T1" t1
                     Output: t1."C1"
                     InfluxDB query: SELECT "C1" FROM "T1"
         ->  Materialize
               Output: t3.c1
               ->  Merge Join
                     Output: t3.c1
                     Merge Cond: (t2.c1 = t3.c1)
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
(28 rows)

SELECT t1."C1" FROM "S 1"."T1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C1") OFFSET 100 LIMIT 10;
 C1  
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- Test similar to above, except that the full join prevents any equivalence
-- classes from being merged. This produces single relation equivalence classes
-- included in join restrictions.
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C1", t2.c1, t3.c1 FROM "S 1"."T1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C1") OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1."C1", t2.c1, t3.c1
   ->  Merge Left Join
         Output: t1."C1", t2.c1, t3.c1
         Merge Cond: (t1."C1" = t3.c1)
         ->  Sort
               Output: t1."C1"
               Sort Key: t1."C1"
               ->  Foreign Scan on "S 1"."T1" t1
                     Output: t1."C1"
                     InfluxDB query: SELECT "C1" FROM "T1"
         ->  Materialize
               Output: t3.c1, t2.c1
               ->  Merge Left Join
                     Output: t3.c1, t2.c1
                     Merge Cond: (t3.c1 = t2.c1)
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
(28 rows)

SELECT t1."C1", t2.c1, t3.c1 FROM "S 1"."T1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C1") OFFSET 100 LIMIT 10;
 C1  | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

-- Test similar to above with all full outer joins
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C1", t2.c1, t3.c1 FROM "S 1"."T1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C1") OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1."C1", t2.c1, t3.c1
   ->  Merge Full Join
         Output: t1."C1", t2.c1, t3.c1
         Merge Cond: (t1."C1" = t3.c1)
         ->  Sort
               Output: t1."C1"
               Sort Key: t1."C1"
               ->  Foreign Scan on "S 1"."T1" t1
                     Output: t1."C1"
                     InfluxDB query: SELECT "C1" FROM "T1"
         ->  Sort
               Output: t2.c1, t3.c1
               Sort Key: t3.c1
               ->  Merge Full Join
                     Output: t2.c1, t3.c1
                     Merge Cond: (t2.c1 = t3.c1)
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
(29 rows)

SELECT t1."C1", t2.c1, t3.c1 FROM "S 1"."T1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C1") OFFSET 100 LIMIT 10;
 C1  | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

RESET enable_hashjoin;
RESET enable_nestloop;
-- ===================================================================
-- WHERE with remotely-executable conditions
-- ===================================================================
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 1;         -- Var, OpExpr(b), Const
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 100 AND t1.c2 = 0; -- BoolExpr
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 100)) AND (("c2" = 0))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NULL;        -- NullTest
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: (t1.c1 IS NULL)
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NOT NULL;    -- NullTest
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: (t1.c1 IS NOT NULL)
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE round(abs(c1), 0) = 1; -- FuncExpr
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: (round((abs(t1.c1))::numeric, 0) = '1'::numeric)
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = -c1;          -- OpExpr(l)
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = (- "C1")))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE 1 = c1!;           -- OpExpr(r)
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: ('1'::numeric = ((t1.c1)::bigint !))
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (c1 IS NOT NULL) IS DISTINCT FROM (c1 IS NOT NULL); -- DistinctExpr
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: ((t1.c1 IS NOT NULL) IS DISTINCT FROM (t1.c1 IS NOT NULL))
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = ANY(ARRAY[c2, 1, c1 + 0]); -- ScalarArrayOpExpr
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: (t1.c1 = ANY (ARRAY[t1.c2, 1, (t1.c1 + 0)]))
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = (ARRAY[c1,c2,3])[1]; -- ArrayRef
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   Filter: (t1.c1 = (ARRAY[t1.c1, t1.c2, 3])[1])
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c6 = E'foo''s\\bar';  -- check special chars
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c6" = 'foo''s\\bar'))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c8 = 'foo';  -- can't be sent to remote
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c8" = 'foo'))
(3 rows)

-- parameterized remote path for foreign table
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM "S 1"."T1" a, ft2 b WHERE a."C1" = 47 AND b.c1 = a.c2;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Hash Join
   Output: a."time", a."C1", a.c2, a.c3, a.c6, a.c7, a.c8, b."time", b.c1, b.c2, b.c3, b.c6, b.c7, b.c8
   Hash Cond: (b.c1 = a.c2)
   ->  Foreign Scan on public.ft2 b
         Output: b."time", b.c1, b.c2, b.c3, b.c6, b.c7, b.c8
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
   ->  Hash
         Output: a."time", a."C1", a.c2, a.c3, a.c6, a.c7, a.c8
         ->  Foreign Scan on "S 1"."T1" a
               Output: a."time", a."C1", a.c2, a.c3, a.c6, a.c7, a.c8
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 47))
(11 rows)

SELECT * FROM ft2 a, ft2 b WHERE a.c1 = 47 AND b.c1 = a.c2;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  |           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----+--------------------------+----+----+-------+----+------------+-----
 Tue Feb 17 00:00:00 1970 | 47 |  7 | 00047 | 7  | 7          | foo | Thu Jan 08 00:00:00 1970 |  7 |  7 | 00007 | 7  | 7          | foo
(1 row)

-- check both safe and unsafe join conditions
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft2 a, ft2 b
  WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Hash Join
   Output: a."time", a.c1, a.c2, a.c3, a.c6, a.c7, a.c8, b."time", b.c1, b.c2, b.c3, b.c6, b.c7, b.c8
   Hash Cond: ((b.c1 = a.c1) AND ((b.c7)::text = upper((a.c7)::text)))
   ->  Foreign Scan on public.ft2 b
         Output: b."time", b.c1, b.c2, b.c3, b.c6, b.c7, b.c8
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
   ->  Hash
         Output: a."time", a.c1, a.c2, a.c3, a.c6, a.c7, a.c8
         ->  Foreign Scan on public.ft2 a
               Output: a."time", a.c1, a.c2, a.c3, a.c6, a.c7, a.c8
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c2" = 6)) AND (("c8" = 'foo'))
(11 rows)

SELECT * FROM ft2 a, ft2 b
WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  |           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----+--------------------------+-----+----+-------+----+------------+-----
 Wed Jan 07 00:00:00 1970 |   6 |  6 | 00006 | 6  | 6          | foo | Wed Jan 07 00:00:00 1970 |   6 |  6 | 00006 | 6  | 6          | foo
 Sat Jan 17 00:00:00 1970 |  16 |  6 | 00016 | 6  | 6          | foo | Sat Jan 17 00:00:00 1970 |  16 |  6 | 00016 | 6  | 6          | foo
 Tue Jan 27 00:00:00 1970 |  26 |  6 | 00026 | 6  | 6          | foo | Tue Jan 27 00:00:00 1970 |  26 |  6 | 00026 | 6  | 6          | foo
 Fri Feb 06 00:00:00 1970 |  36 |  6 | 00036 | 6  | 6          | foo | Fri Feb 06 00:00:00 1970 |  36 |  6 | 00036 | 6  | 6          | foo
 Mon Feb 16 00:00:00 1970 |  46 |  6 | 00046 | 6  | 6          | foo | Mon Feb 16 00:00:00 1970 |  46 |  6 | 00046 | 6  | 6          | foo
 Thu Feb 26 00:00:00 1970 |  56 |  6 | 00056 | 6  | 6          | foo | Thu Feb 26 00:00:00 1970 |  56 |  6 | 00056 | 6  | 6          | foo
 Sun Mar 08 00:00:00 1970 |  66 |  6 | 00066 | 6  | 6          | foo | Sun Mar 08 00:00:00 1970 |  66 |  6 | 00066 | 6  | 6          | foo
 Wed Mar 18 00:00:00 1970 |  76 |  6 | 00076 | 6  | 6          | foo | Wed Mar 18 00:00:00 1970 |  76 |  6 | 00076 | 6  | 6          | foo
 Sat Mar 28 00:00:00 1970 |  86 |  6 | 00086 | 6  | 6          | foo | Sat Mar 28 00:00:00 1970 |  86 |  6 | 00086 | 6  | 6          | foo
 Tue Apr 07 00:00:00 1970 |  96 |  6 | 00096 | 6  | 6          | foo | Tue Apr 07 00:00:00 1970 |  96 |  6 | 00096 | 6  | 6          | foo
 Fri Apr 17 00:00:00 1970 | 106 |  6 | 00106 | 6  | 6          | foo | Fri Apr 17 00:00:00 1970 | 106 |  6 | 00106 | 6  | 6          | foo
 Mon Apr 27 00:00:00 1970 | 116 |  6 | 00116 | 6  | 6          | foo | Mon Apr 27 00:00:00 1970 | 116 |  6 | 00116 | 6  | 6          | foo
 Thu May 07 00:00:00 1970 | 126 |  6 | 00126 | 6  | 6          | foo | Thu May 07 00:00:00 1970 | 126 |  6 | 00126 | 6  | 6          | foo
 Sun May 17 00:00:00 1970 | 136 |  6 | 00136 | 6  | 6          | foo | Sun May 17 00:00:00 1970 | 136 |  6 | 00136 | 6  | 6          | foo
 Wed May 27 00:00:00 1970 | 146 |  6 | 00146 | 6  | 6          | foo | Wed May 27 00:00:00 1970 | 146 |  6 | 00146 | 6  | 6          | foo
 Sat Jun 06 00:00:00 1970 | 156 |  6 | 00156 | 6  | 6          | foo | Sat Jun 06 00:00:00 1970 | 156 |  6 | 00156 | 6  | 6          | foo
 Tue Jun 16 00:00:00 1970 | 166 |  6 | 00166 | 6  | 6          | foo | Tue Jun 16 00:00:00 1970 | 166 |  6 | 00166 | 6  | 6          | foo
 Fri Jun 26 00:00:00 1970 | 176 |  6 | 00176 | 6  | 6          | foo | Fri Jun 26 00:00:00 1970 | 176 |  6 | 00176 | 6  | 6          | foo
 Mon Jul 06 00:00:00 1970 | 186 |  6 | 00186 | 6  | 6          | foo | Mon Jul 06 00:00:00 1970 | 186 |  6 | 00186 | 6  | 6          | foo
 Thu Jul 16 00:00:00 1970 | 196 |  6 | 00196 | 6  | 6          | foo | Thu Jul 16 00:00:00 1970 | 196 |  6 | 00196 | 6  | 6          | foo
 Sun Jul 26 00:00:00 1970 | 206 |  6 | 00206 | 6  | 6          | foo | Sun Jul 26 00:00:00 1970 | 206 |  6 | 00206 | 6  | 6          | foo
 Wed Aug 05 00:00:00 1970 | 216 |  6 | 00216 | 6  | 6          | foo | Wed Aug 05 00:00:00 1970 | 216 |  6 | 00216 | 6  | 6          | foo
 Sat Aug 15 00:00:00 1970 | 226 |  6 | 00226 | 6  | 6          | foo | Sat Aug 15 00:00:00 1970 | 226 |  6 | 00226 | 6  | 6          | foo
 Tue Aug 25 00:00:00 1970 | 236 |  6 | 00236 | 6  | 6          | foo | Tue Aug 25 00:00:00 1970 | 236 |  6 | 00236 | 6  | 6          | foo
 Fri Sep 04 00:00:00 1970 | 246 |  6 | 00246 | 6  | 6          | foo | Fri Sep 04 00:00:00 1970 | 246 |  6 | 00246 | 6  | 6          | foo
 Mon Sep 14 00:00:00 1970 | 256 |  6 | 00256 | 6  | 6          | foo | Mon Sep 14 00:00:00 1970 | 256 |  6 | 00256 | 6  | 6          | foo
 Thu Sep 24 00:00:00 1970 | 266 |  6 | 00266 | 6  | 6          | foo | Thu Sep 24 00:00:00 1970 | 266 |  6 | 00266 | 6  | 6          | foo
 Sun Oct 04 00:00:00 1970 | 276 |  6 | 00276 | 6  | 6          | foo | Sun Oct 04 00:00:00 1970 | 276 |  6 | 00276 | 6  | 6          | foo
 Wed Oct 14 00:00:00 1970 | 286 |  6 | 00286 | 6  | 6          | foo | Wed Oct 14 00:00:00 1970 | 286 |  6 | 00286 | 6  | 6          | foo
 Sat Oct 24 00:00:00 1970 | 296 |  6 | 00296 | 6  | 6          | foo | Sat Oct 24 00:00:00 1970 | 296 |  6 | 00296 | 6  | 6          | foo
 Tue Nov 03 00:00:00 1970 | 306 |  6 | 00306 | 6  | 6          | foo | Tue Nov 03 00:00:00 1970 | 306 |  6 | 00306 | 6  | 6          | foo
 Fri Nov 13 00:00:00 1970 | 316 |  6 | 00316 | 6  | 6          | foo | Fri Nov 13 00:00:00 1970 | 316 |  6 | 00316 | 6  | 6          | foo
 Mon Nov 23 00:00:00 1970 | 326 |  6 | 00326 | 6  | 6          | foo | Mon Nov 23 00:00:00 1970 | 326 |  6 | 00326 | 6  | 6          | foo
 Thu Dec 03 00:00:00 1970 | 336 |  6 | 00336 | 6  | 6          | foo | Thu Dec 03 00:00:00 1970 | 336 |  6 | 00336 | 6  | 6          | foo
 Sun Dec 13 00:00:00 1970 | 346 |  6 | 00346 | 6  | 6          | foo | Sun Dec 13 00:00:00 1970 | 346 |  6 | 00346 | 6  | 6          | foo
 Wed Dec 23 00:00:00 1970 | 356 |  6 | 00356 | 6  | 6          | foo | Wed Dec 23 00:00:00 1970 | 356 |  6 | 00356 | 6  | 6          | foo
 Sat Jan 02 00:00:00 1971 | 366 |  6 | 00366 | 6  | 6          | foo | Sat Jan 02 00:00:00 1971 | 366 |  6 | 00366 | 6  | 6          | foo
 Tue Jan 12 00:00:00 1971 | 376 |  6 | 00376 | 6  | 6          | foo | Tue Jan 12 00:00:00 1971 | 376 |  6 | 00376 | 6  | 6          | foo
 Fri Jan 22 00:00:00 1971 | 386 |  6 | 00386 | 6  | 6          | foo | Fri Jan 22 00:00:00 1971 | 386 |  6 | 00386 | 6  | 6          | foo
 Mon Feb 01 00:00:00 1971 | 396 |  6 | 00396 | 6  | 6          | foo | Mon Feb 01 00:00:00 1971 | 396 |  6 | 00396 | 6  | 6          | foo
 Thu Feb 11 00:00:00 1971 | 406 |  6 | 00406 | 6  | 6          | foo | Thu Feb 11 00:00:00 1971 | 406 |  6 | 00406 | 6  | 6          | foo
 Sun Feb 21 00:00:00 1971 | 416 |  6 | 00416 | 6  | 6          | foo | Sun Feb 21 00:00:00 1971 | 416 |  6 | 00416 | 6  | 6          | foo
 Wed Mar 03 00:00:00 1971 | 426 |  6 | 00426 | 6  | 6          | foo | Wed Mar 03 00:00:00 1971 | 426 |  6 | 00426 | 6  | 6          | foo
 Sat Mar 13 00:00:00 1971 | 436 |  6 | 00436 | 6  | 6          | foo | Sat Mar 13 00:00:00 1971 | 436 |  6 | 00436 | 6  | 6          | foo
 Tue Mar 23 00:00:00 1971 | 446 |  6 | 00446 | 6  | 6          | foo | Tue Mar 23 00:00:00 1971 | 446 |  6 | 00446 | 6  | 6          | foo
 Fri Apr 02 00:00:00 1971 | 456 |  6 | 00456 | 6  | 6          | foo | Fri Apr 02 00:00:00 1971 | 456 |  6 | 00456 | 6  | 6          | foo
 Mon Apr 12 00:00:00 1971 | 466 |  6 | 00466 | 6  | 6          | foo | Mon Apr 12 00:00:00 1971 | 466 |  6 | 00466 | 6  | 6          | foo
 Thu Apr 22 00:00:00 1971 | 476 |  6 | 00476 | 6  | 6          | foo | Thu Apr 22 00:00:00 1971 | 476 |  6 | 00476 | 6  | 6          | foo
 Sun May 02 00:00:00 1971 | 486 |  6 | 00486 | 6  | 6          | foo | Sun May 02 00:00:00 1971 | 486 |  6 | 00486 | 6  | 6          | foo
 Wed May 12 00:00:00 1971 | 496 |  6 | 00496 | 6  | 6          | foo | Wed May 12 00:00:00 1971 | 496 |  6 | 00496 | 6  | 6          | foo
 Sat May 22 00:00:00 1971 | 506 |  6 | 00506 | 6  | 6          | foo | Sat May 22 00:00:00 1971 | 506 |  6 | 00506 | 6  | 6          | foo
 Tue Jun 01 00:00:00 1971 | 516 |  6 | 00516 | 6  | 6          | foo | Tue Jun 01 00:00:00 1971 | 516 |  6 | 00516 | 6  | 6          | foo
 Fri Jun 11 00:00:00 1971 | 526 |  6 | 00526 | 6  | 6          | foo | Fri Jun 11 00:00:00 1971 | 526 |  6 | 00526 | 6  | 6          | foo
 Mon Jun 21 00:00:00 1971 | 536 |  6 | 00536 | 6  | 6          | foo | Mon Jun 21 00:00:00 1971 | 536 |  6 | 00536 | 6  | 6          | foo
 Thu Jul 01 00:00:00 1971 | 546 |  6 | 00546 | 6  | 6          | foo | Thu Jul 01 00:00:00 1971 | 546 |  6 | 00546 | 6  | 6          | foo
 Sun Jul 11 00:00:00 1971 | 556 |  6 | 00556 | 6  | 6          | foo | Sun Jul 11 00:00:00 1971 | 556 |  6 | 00556 | 6  | 6          | foo
 Wed Jul 21 00:00:00 1971 | 566 |  6 | 00566 | 6  | 6          | foo | Wed Jul 21 00:00:00 1971 | 566 |  6 | 00566 | 6  | 6          | foo
 Sat Jul 31 00:00:00 1971 | 576 |  6 | 00576 | 6  | 6          | foo | Sat Jul 31 00:00:00 1971 | 576 |  6 | 00576 | 6  | 6          | foo
 Tue Aug 10 00:00:00 1971 | 586 |  6 | 00586 | 6  | 6          | foo | Tue Aug 10 00:00:00 1971 | 586 |  6 | 00586 | 6  | 6          | foo
 Fri Aug 20 00:00:00 1971 | 596 |  6 | 00596 | 6  | 6          | foo | Fri Aug 20 00:00:00 1971 | 596 |  6 | 00596 | 6  | 6          | foo
 Mon Aug 30 00:00:00 1971 | 606 |  6 | 00606 | 6  | 6          | foo | Mon Aug 30 00:00:00 1971 | 606 |  6 | 00606 | 6  | 6          | foo
 Thu Sep 09 00:00:00 1971 | 616 |  6 | 00616 | 6  | 6          | foo | Thu Sep 09 00:00:00 1971 | 616 |  6 | 00616 | 6  | 6          | foo
 Sun Sep 19 00:00:00 1971 | 626 |  6 | 00626 | 6  | 6          | foo | Sun Sep 19 00:00:00 1971 | 626 |  6 | 00626 | 6  | 6          | foo
 Wed Sep 29 00:00:00 1971 | 636 |  6 | 00636 | 6  | 6          | foo | Wed Sep 29 00:00:00 1971 | 636 |  6 | 00636 | 6  | 6          | foo
 Sat Oct 09 00:00:00 1971 | 646 |  6 | 00646 | 6  | 6          | foo | Sat Oct 09 00:00:00 1971 | 646 |  6 | 00646 | 6  | 6          | foo
 Tue Oct 19 00:00:00 1971 | 656 |  6 | 00656 | 6  | 6          | foo | Tue Oct 19 00:00:00 1971 | 656 |  6 | 00656 | 6  | 6          | foo
 Fri Oct 29 00:00:00 1971 | 666 |  6 | 00666 | 6  | 6          | foo | Fri Oct 29 00:00:00 1971 | 666 |  6 | 00666 | 6  | 6          | foo
 Mon Nov 08 00:00:00 1971 | 676 |  6 | 00676 | 6  | 6          | foo | Mon Nov 08 00:00:00 1971 | 676 |  6 | 00676 | 6  | 6          | foo
 Thu Nov 18 00:00:00 1971 | 686 |  6 | 00686 | 6  | 6          | foo | Thu Nov 18 00:00:00 1971 | 686 |  6 | 00686 | 6  | 6          | foo
 Sun Nov 28 00:00:00 1971 | 696 |  6 | 00696 | 6  | 6          | foo | Sun Nov 28 00:00:00 1971 | 696 |  6 | 00696 | 6  | 6          | foo
 Wed Dec 08 00:00:00 1971 | 706 |  6 | 00706 | 6  | 6          | foo | Wed Dec 08 00:00:00 1971 | 706 |  6 | 00706 | 6  | 6          | foo
 Sat Dec 18 00:00:00 1971 | 716 |  6 | 00716 | 6  | 6          | foo | Sat Dec 18 00:00:00 1971 | 716 |  6 | 00716 | 6  | 6          | foo
 Tue Dec 28 00:00:00 1971 | 726 |  6 | 00726 | 6  | 6          | foo | Tue Dec 28 00:00:00 1971 | 726 |  6 | 00726 | 6  | 6          | foo
 Fri Jan 07 00:00:00 1972 | 736 |  6 | 00736 | 6  | 6          | foo | Fri Jan 07 00:00:00 1972 | 736 |  6 | 00736 | 6  | 6          | foo
 Mon Jan 17 00:00:00 1972 | 746 |  6 | 00746 | 6  | 6          | foo | Mon Jan 17 00:00:00 1972 | 746 |  6 | 00746 | 6  | 6          | foo
 Thu Jan 27 00:00:00 1972 | 756 |  6 | 00756 | 6  | 6          | foo | Thu Jan 27 00:00:00 1972 | 756 |  6 | 00756 | 6  | 6          | foo
 Sun Feb 06 00:00:00 1972 | 766 |  6 | 00766 | 6  | 6          | foo | Sun Feb 06 00:00:00 1972 | 766 |  6 | 00766 | 6  | 6          | foo
 Wed Feb 16 00:00:00 1972 | 776 |  6 | 00776 | 6  | 6          | foo | Wed Feb 16 00:00:00 1972 | 776 |  6 | 00776 | 6  | 6          | foo
 Sat Feb 26 00:00:00 1972 | 786 |  6 | 00786 | 6  | 6          | foo | Sat Feb 26 00:00:00 1972 | 786 |  6 | 00786 | 6  | 6          | foo
 Tue Mar 07 00:00:00 1972 | 796 |  6 | 00796 | 6  | 6          | foo | Tue Mar 07 00:00:00 1972 | 796 |  6 | 00796 | 6  | 6          | foo
 Fri Mar 17 00:00:00 1972 | 806 |  6 | 00806 | 6  | 6          | foo | Fri Mar 17 00:00:00 1972 | 806 |  6 | 00806 | 6  | 6          | foo
 Mon Mar 27 00:00:00 1972 | 816 |  6 | 00816 | 6  | 6          | foo | Mon Mar 27 00:00:00 1972 | 816 |  6 | 00816 | 6  | 6          | foo
 Thu Apr 06 00:00:00 1972 | 826 |  6 | 00826 | 6  | 6          | foo | Thu Apr 06 00:00:00 1972 | 826 |  6 | 00826 | 6  | 6          | foo
 Sun Apr 16 00:00:00 1972 | 836 |  6 | 00836 | 6  | 6          | foo | Sun Apr 16 00:00:00 1972 | 836 |  6 | 00836 | 6  | 6          | foo
 Wed Apr 26 00:00:00 1972 | 846 |  6 | 00846 | 6  | 6          | foo | Wed Apr 26 00:00:00 1972 | 846 |  6 | 00846 | 6  | 6          | foo
 Sat May 06 00:00:00 1972 | 856 |  6 | 00856 | 6  | 6          | foo | Sat May 06 00:00:00 1972 | 856 |  6 | 00856 | 6  | 6          | foo
 Tue May 16 00:00:00 1972 | 866 |  6 | 00866 | 6  | 6          | foo | Tue May 16 00:00:00 1972 | 866 |  6 | 00866 | 6  | 6          | foo
 Fri May 26 00:00:00 1972 | 876 |  6 | 00876 | 6  | 6          | foo | Fri May 26 00:00:00 1972 | 876 |  6 | 00876 | 6  | 6          | foo
 Mon Jun 05 00:00:00 1972 | 886 |  6 | 00886 | 6  | 6          | foo | Mon Jun 05 00:00:00 1972 | 886 |  6 | 00886 | 6  | 6          | foo
 Thu Jun 15 00:00:00 1972 | 896 |  6 | 00896 | 6  | 6          | foo | Thu Jun 15 00:00:00 1972 | 896 |  6 | 00896 | 6  | 6          | foo
 Sun Jun 25 00:00:00 1972 | 906 |  6 | 00906 | 6  | 6          | foo | Sun Jun 25 00:00:00 1972 | 906 |  6 | 00906 | 6  | 6          | foo
 Wed Jul 05 00:00:00 1972 | 916 |  6 | 00916 | 6  | 6          | foo | Wed Jul 05 00:00:00 1972 | 916 |  6 | 00916 | 6  | 6          | foo
 Sat Jul 15 00:00:00 1972 | 926 |  6 | 00926 | 6  | 6          | foo | Sat Jul 15 00:00:00 1972 | 926 |  6 | 00926 | 6  | 6          | foo
 Tue Jul 25 00:00:00 1972 | 936 |  6 | 00936 | 6  | 6          | foo | Tue Jul 25 00:00:00 1972 | 936 |  6 | 00936 | 6  | 6          | foo
 Fri Aug 04 00:00:00 1972 | 946 |  6 | 00946 | 6  | 6          | foo | Fri Aug 04 00:00:00 1972 | 946 |  6 | 00946 | 6  | 6          | foo
 Mon Aug 14 00:00:00 1972 | 956 |  6 | 00956 | 6  | 6          | foo | Mon Aug 14 00:00:00 1972 | 956 |  6 | 00956 | 6  | 6          | foo
 Thu Aug 24 00:00:00 1972 | 966 |  6 | 00966 | 6  | 6          | foo | Thu Aug 24 00:00:00 1972 | 966 |  6 | 00966 | 6  | 6          | foo
 Sun Sep 03 00:00:00 1972 | 976 |  6 | 00976 | 6  | 6          | foo | Sun Sep 03 00:00:00 1972 | 976 |  6 | 00976 | 6  | 6          | foo
 Wed Sep 13 00:00:00 1972 | 986 |  6 | 00986 | 6  | 6          | foo | Wed Sep 13 00:00:00 1972 | 986 |  6 | 00986 | 6  | 6          | foo
 Sat Sep 23 00:00:00 1972 | 996 |  6 | 00996 | 6  | 6          | foo | Sat Sep 23 00:00:00 1972 | 996 |  6 | 00996 | 6  | 6          | foo
(100 rows)

-- bug before 9.3.5 due to sloppy handling of remote-estimate parameters
SELECT * FROM ft1 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft2 WHERE c1 < 5));
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
 Sun Jan 04 00:00:00 1970 |  3 |  3 | 00003 | 3  | 3          | foo
 Mon Jan 05 00:00:00 1970 |  4 |  4 | 00004 | 4  | 4          | foo
(4 rows)

SELECT * FROM ft2 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft1 WHERE c1 < 5));
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
 Sun Jan 04 00:00:00 1970 |  3 |  3 | 00003 | 3  | 3          | foo
 Mon Jan 05 00:00:00 1970 |  4 |  4 | 00004 | 4  | 4          | foo
(4 rows)

-- we should not push order by clause with volatile expressions or unsafe
-- collations
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, random();
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort
   Output: "time", c1, c2, c3, c6, c7, c8, (random())
   Sort Key: ft2.c1, (random())
   ->  Foreign Scan on public.ft2
         Output: "time", c1, c2, c3, c6, c7, c8, random()
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(6 rows)

EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, ft2.c3 collate "C";
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort
   Output: "time", c1, c2, c3, c6, c7, c8, ((c3)::text)
   Sort Key: ft2.c1, ft2.c3 COLLATE "C"
   ->  Foreign Scan on public.ft2
         Output: "time", c1, c2, c3, c6, c7, c8, c3
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(6 rows)

-- user-defined operator/function
CREATE FUNCTION influxdb_fdw_abs(int) RETURNS int AS $$
BEGIN
RETURN abs($1);
END
$$ LANGUAGE plpgsql IMMUTABLE;
CREATE OPERATOR === (
    LEFTARG = int,
    RIGHTARG = int,
    PROCEDURE = int4eq,
    COMMUTATOR = ===
);
-- built-in operators and functions can be shipped for remote execution
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 = abs(t1.c2))
         InfluxDB query: SELECT "C1", "c2", "c3" FROM "T1"
(6 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
 count 
-------
     9
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
                              QUERY PLAN                              
----------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   InfluxDB query: SELECT count("c3") FROM "T1" WHERE (("C1" = "c2"))
(3 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
 count 
-------
     9
(1 row)

-- by default, user-defined ones cannot
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = influxdb_fdw_abs(t1.c2);
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 = influxdb_fdw_abs(t1.c2))
         InfluxDB query: SELECT "C1", "c2", "c3" FROM "T1"
(6 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = influxdb_fdw_abs(t1.c2);
 count 
-------
     9
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         InfluxDB query: SELECT "C1", "c2", "c3" FROM "T1"
(6 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count 
-------
     9
(1 row)

-- but let's put them in an extension ...
ALTER EXTENSION influxdb_fdw ADD FUNCTION influxdb_fdw_abs(int);
ALTER EXTENSION influxdb_fdw ADD OPERATOR === (int, int);
-- ... now they can be shipped
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = influxdb_fdw_abs(t1.c2);
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 = influxdb_fdw_abs(t1.c2))
         InfluxDB query: SELECT "C1", "c2", "c3" FROM "T1"
(6 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = influxdb_fdw_abs(t1.c2);
 count 
-------
     9
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         InfluxDB query: SELECT "C1", "c2", "c3" FROM "T1"
(6 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count 
-------
     9
(1 row)

-- ===================================================================
-- JOIN queries
-- ===================================================================
-- join two tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Merge Join
               Output: t1.c1, t2.c1, t1.c3
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1, t1.c3
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c3
                           InfluxDB query: SELECT "C1", "c3" FROM "T1"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "C1" FROM "T1"
(20 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3, t1.c3
   ->  Sort
         Output: t1.c1, t2.c2, t3.c3, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Merge Join
               Output: t1.c1, t2.c2, t3.c3, t1.c3
               Merge Cond: (t2.c1 = t1.c1)
               ->  Sort
                     Output: t2.c2, t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
               ->  Materialize
                     Output: t1.c1, t1.c3, t3.c3, t3.c1
                     ->  Merge Join
                           Output: t1.c1, t1.c3, t3.c3, t3.c1
                           Merge Cond: (t1.c1 = t3.c1)
                           ->  Sort
                                 Output: t1.c1, t1.c3
                                 Sort Key: t1.c1
                                 ->  Foreign Scan on public.ft1 t1
                                       Output: t1.c1, t1.c3
                                       InfluxDB query: SELECT "C1", "c3" FROM "T1"
                           ->  Sort
                                 Output: t3.c3, t3.c1
                                 Sort Key: t3.c1
                                 ->  Foreign Scan on public.ft4 t3
                                       Output: t3.c3, t3.c1
                                       InfluxDB query: SELECT "c1", "c3" FROM "T3"
(31 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Left Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "c1" FROM "T4"
(20 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 22 |   
 24 | 24
 26 |   
 28 |   
 30 | 30
 32 |   
 34 |   
 36 | 36
 38 |   
 40 |   
(10 rows)

-- left outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Materialize
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + placement of clauses.
-- clauses within the nullable side are not pulled up, but top level clause on
-- non-nullable side is pushed into non-nullable side
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Hash Left Join
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Hash Cond: (t1.c1 = ft5.c1)
   ->  Foreign Scan on public.ft4 t1
         Output: t1.c1, t1.c2, t1.c3
         InfluxDB query: SELECT "c1", "c2" FROM "T3" WHERE (("c1" < 10))
   ->  Hash
         Output: ft5.c1, ft5.c2
         ->  Foreign Scan on public.ft5
               Output: ft5.c1, ft5.c2
               InfluxDB query: SELECT "c1", "c2" FROM "T4" WHERE (("c1" < 10))
(11 rows)

SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- clauses within the nullable side are not pulled up, but the top level clause
-- on nullable side is not pushed down into nullable side
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Hash Left Join
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Hash Cond: (t1.c1 = ft5.c1)
   Filter: ((ft5.c1 < 10) OR (ft5.c1 IS NULL))
   ->  Foreign Scan on public.ft4 t1
         Output: t1.c1, t1.c2, t1.c3
         InfluxDB query: SELECT "c1", "c2" FROM "T3" WHERE (("c1" < 10))
   ->  Hash
         Output: ft5.c1, ft5.c2
         ->  Foreign Scan on public.ft5
               Output: ft5.c1, ft5.c2
               InfluxDB query: SELECT "c1", "c2" FROM "T4" WHERE (("c1" < 10))
(12 rows)

SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t2.c1, t1.c1
         ->  Merge Left Join
               Output: t1.c1, t2.c1
               Merge Cond: (t2.c1 = t1.c1)
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft4 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft5 t1
                           Output: t1.c1
                           InfluxDB query: SELECT "c1" FROM "T4"
(20 rows)

SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
    | 22
 24 | 24
    | 26
    | 28
 30 | 30
    | 32
    | 34
 36 | 36
    | 38
    | 40
(10 rows)

-- right outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t3.c3, t2.c2, t2.c1
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c1, t3.c2, t3.c3
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Materialize
               Output: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Full Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "c1" FROM "T4"
(20 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
 c1  | c1 
-----+----
  92 |   
  94 |   
  96 | 96
  98 |   
 100 |   
     |  3
     |  9
     | 15
     | 21
     | 27
(10 rows)

-- full outer join with restrictions on the joining relations
-- a. the joining relations are both base relations
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, ft5.c1
   Sort Key: ft4.c1, ft5.c1
   ->  Hash Full Join
         Output: ft4.c1, ft5.c1
         Hash Cond: (ft4.c1 = ft5.c1)
         ->  Foreign Scan on public.ft4
               Output: ft4.c1, ft4.c2, ft4.c3
               InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Hash
               Output: ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1
                     InfluxDB query: SELECT "c1" FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(14 rows)

SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
 c1 | c1 
----+----
 50 |   
 52 |   
 54 | 54
 56 |   
 58 |   
 60 | 60
    | 51
    | 57
(8 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Limit
   Output: 1
   ->  Merge Full Join
         Output: 1
         ->  Foreign Scan on public.ft4
               Output: ft4.c1, ft4.c2, ft4.c3
               InfluxDB query: SELECT * FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Materialize
               Output: ft5.c1, ft5.c2, ft5.c3
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1, ft5.c2, ft5.c3
                     InfluxDB query: SELECT * FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(12 rows)

SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
 ?column? 
----------
        1
        1
        1
        1
        1
        1
        1
        1
        1
        1
(10 rows)

-- b. one of the joining relations is a base relation and the other is a join
-- relation
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, t2.c1, t3.c1
   Sort Key: ft4.c1, t2.c1, t3.c1
   ->  Hash Full Join
         Output: ft4.c1, t2.c1, t3.c1
         Hash Cond: (t2.c1 = ft4.c1)
         ->  Hash Right Join
               Output: t2.c1, t3.c1
               Hash Cond: (t3.c1 = t2.c1)
               ->  Foreign Scan on public.ft5 t3
                     Output: t3.c1, t3.c2, t3.c3
                     InfluxDB query: SELECT "c1" FROM "T4"
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft4 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Hash
               Output: ft4.c1
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1
                     InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(22 rows)

SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 52 | 52 |   
 54 | 54 | 54
 56 | 56 |   
 58 | 58 |   
 60 | 60 | 60
(6 rows)

-- c. test deparsing the remote query as nested subqueries
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, ft4_1.c1, ft5.c1
   Sort Key: ft4.c1, ft4_1.c1, ft5.c1
   ->  Hash Full Join
         Output: ft4.c1, ft4_1.c1, ft5.c1
         Hash Cond: (ft4_1.c1 = ft4.c1)
         ->  Hash Full Join
               Output: ft4_1.c1, ft5.c1
               Hash Cond: (ft4_1.c1 = ft5.c1)
               Filter: ((ft4_1.c1 IS NULL) OR (ft4_1.c1 IS NOT NULL))
               ->  Foreign Scan on public.ft4 ft4_1
                     Output: ft4_1.c1, ft4_1.c2, ft4_1.c3
                     InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
               ->  Hash
                     Output: ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c1
                           InfluxDB query: SELECT "c1" FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Hash
               Output: ft4.c1
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1
                     InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(23 rows)

SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 52 | 52 |   
 54 | 54 | 54
 56 | 56 |   
 58 | 58 |   
 60 | 60 | 60
    |    | 51
    |    | 57
(8 rows)

-- d. test deparsing rowmarked relations as subqueries
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
                                                           QUERY PLAN                                                            
---------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: "T3".c1, ft4.c1, ft5.c1, "T3".*, ft4.*, ft5.*
   ->  Sort
         Output: "T3".c1, ft4.c1, ft5.c1, "T3".*, ft4.*, ft5.*
         Sort Key: ft4.c1, ft5.c1
         ->  Nested Loop
               Output: "T3".c1, ft4.c1, ft5.c1, "T3".*, ft4.*, ft5.*
               ->  Foreign Scan on "S 1"."T3"
                     Output: "T3".c1, "T3".*
                     InfluxDB query: SELECT "c1", "c2", "c3" FROM "T3" WHERE (("c1" = 50))
               ->  Materialize
                     Output: ft4.c1, ft4.*, ft5.c1, ft5.*
                     ->  Merge Full Join
                           Output: ft4.c1, ft4.*, ft5.c1, ft5.*
                           Merge Cond: (ft4.c1 = ft5.c1)
                           Filter: ((ft4.c1 IS NULL) OR (ft4.c1 IS NOT NULL))
                           ->  Sort
                                 Output: ft4.c1, ft4.*
                                 Sort Key: ft4.c1
                                 ->  Foreign Scan on public.ft4
                                       Output: ft4.c1, ft4.*
                                       InfluxDB query: SELECT "c1", "c2", "c3" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
                           ->  Sort
                                 Output: ft5.c1, ft5.*
                                 Sort Key: ft5.c1
                                 ->  Foreign Scan on public.ft5
                                       Output: ft5.c1, ft5.*
                                       InfluxDB query: SELECT "c1", "c2", "c3" FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(28 rows)

SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 50 | 52 |   
 50 | 54 | 54
 50 | 56 |   
 50 | 58 |   
 50 | 60 | 60
 50 |    | 51
 50 |    | 57
(8 rows)

-- full outer join + inner join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t3.c1
   ->  Sort
         Output: t1.c1, t2.c1, t3.c1
         Sort Key: t1.c1, t2.c1, t3.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c1, t3.c1
               Hash Cond: (t3.c1 = t2.c1)
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c1, t3.c2, t3.c3
                     InfluxDB query: SELECT "c1" FROM "T3"
               ->  Hash
                     Output: t1.c1, t2.c1
                     ->  Hash Join
                           Output: t1.c1, t2.c1
                           Hash Cond: ((t2.c1 + 1) = t1.c1)
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1, t2.c2, t2.c3
                                 InfluxDB query: SELECT "c1" FROM "T4"
                           ->  Hash
                                 Output: t1.c1
                                 ->  Foreign Scan on public.ft4 t1
                                       Output: t1.c1
                                       InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(24 rows)

SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
 c1 | c1 | c1 
----+----+----
 52 | 51 |   
 58 | 57 |   
    |    |  2
    |    |  4
    |    |  6
    |    |  8
    |    | 10
    |    | 12
    |    | 14
    |    | 16
(10 rows)

-- full outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- full outer join + right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t3.c3, t2.c2, t2.c1
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c1, t3.c2, t3.c3
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Materialize
               Output: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- right outer join + full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t2.c2, t2.c1, t1.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     InfluxDB query: SELECT "C1", "c2" FROM "T1"
               ->  Materialize
                     Output: t1.c1
                     ->  Foreign Scan on public.ft2 t1
                           Output: t1.c1
                           InfluxDB query: SELECT "C1" FROM "T1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- full outer join + left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t2.c1 = t3.c1)
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Materialize
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- right outer join + left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t2.c2, t2.c1, t3.c3
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     InfluxDB query: SELECT "C1", "c2" FROM "T1"
               ->  Materialize
                     Output: t3.c3, t3.c1
                     ->  Foreign Scan on public.ft4 t3
                           Output: t3.c3, t3.c1
                           InfluxDB query: SELECT "c1", "c3" FROM "T3"
         ->  Materialize
               Output: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Right Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     InfluxDB query: SELECT "c1", "c3" FROM "T3"
(21 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join + WHERE clause, only matched rows
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Full Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c1 = t2.c1)
               Filter: ((t1.c1 = t2.c1) OR (t1.c1 IS NULL))
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "c1" FROM "T4"
(21 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 66 | 66
 72 | 72
 78 | 78
 84 | 84
 90 | 90
 96 | 96
    |  3
    |  9
    | 15
    | 21
(10 rows)

-- full outer join + WHERE clause with shippable extensions set
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE influxdb_fdw_abs(t1.c1) > 0 OFFSET 10 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t1.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t1.c3
         Hash Cond: (t2.c1 = t1.c1)
         Filter: (influxdb_fdw_abs(t1.c1) > 0)
         ->  Foreign Scan on public.ft2 t2
               Output: t2.c2, t2.c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
         ->  Hash
               Output: t1.c1, t1.c3
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1, t1.c3
                     InfluxDB query: SELECT "C1", "c3" FROM "T1"
(14 rows)

-- join two tables with FOR UPDATE clause
-- tests whole-row reference for row marks
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.*
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(18 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.*
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(18 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join two tables with FOR SHARE clause
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.*
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(18 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Hash Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Hash Cond: (t2.c1 = t1.c1)
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.*
                           InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
                     ->  Hash
                           Output: t1.c1, t1.c3, t1.*
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(18 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join in CTE
EXPLAIN (VERBOSE, COSTS OFF)
WITH t (c1_1, c1_3, c2_1) AS (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Limit
   Output: t.c1_1, t.c2_1, t.c1_3
   CTE t
     ->  Merge Join
           Output: t1.c1, t1.c3, t2.c1
           Merge Cond: (t1.c1 = t2.c1)
           ->  Sort
                 Output: t1.c1, t1.c3
                 Sort Key: t1.c1
                 ->  Foreign Scan on public.ft1 t1
                       Output: t1.c1, t1.c3
                       InfluxDB query: SELECT "C1", "c3" FROM "T1"
           ->  Sort
                 Output: t2.c1
                 Sort Key: t2.c1
                 ->  Foreign Scan on public.ft2 t2
                       Output: t2.c1
                       InfluxDB query: SELECT "C1" FROM "T1"
   ->  Sort
         Output: t.c1_1, t.c2_1, t.c1_3
         Sort Key: t.c1_3, t.c1_1
         ->  CTE Scan on t
               Output: t.c1_1, t.c2_1, t.c1_3
(23 rows)

WITH t (c1_1, c1_3, c2_1) AS (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
 c1_1 | c2_1 
------+------
  101 |  101
  102 |  102
  103 |  103
  104 |  104
  105 |  105
  106 |  106
  107 |  107
  108 |  108
  109 |  109
  110 |  110
(10 rows)

-- ctid with whole-row reference
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.ctid, t1, t2, t1.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Limit
   Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
   ->  Sort
         Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Join
               Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.*, t2.c1
                     InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
               ->  Hash
                     Output: t1.ctid, t1.*, t1.c1, t1.c3
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.ctid, t1.*, t1.c1, t1.c3
                           InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(16 rows)

-- SEMI JOIN, not pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Sort
         Output: t1.c1
         Sort Key: t1.c1
         ->  Hash Join
               Output: t1.c1
               Inner Unique: true
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Hash
                     Output: t2.c1
                     ->  HashAggregate
                           Output: t2.c1
                           Group Key: t2.c1
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
(20 rows)

SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- ANTI JOIN, not pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Sort
         Output: t1.c1
         Sort Key: t1.c1
         ->  Hash Anti Join
               Output: t1.c1
               Hash Cond: (t1.c1 = t2.c2)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Hash
                     Output: t2.c2
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2
                           InfluxDB query: SELECT "c2" FROM "T1"
(16 rows)

SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 110
 111
 112
 113
 114
 115
 116
 117
 118
 119
(10 rows)

-- CROSS JOIN, not pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Nested Loop
               Output: t1.c1, t2.c1
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Materialize
                     Output: t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "C1" FROM "T1"
(15 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- different server, not pushed down. No result expected.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                        QUERY PLAN                         
-----------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Merge Join
         Output: t1.c1, t2.c1
         Merge Cond: (t1.c1 = t2.c1)
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft5 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "c1" FROM "T4"
         ->  Sort
               Output: t2.c1
               Sort Key: t2.c1
               ->  Foreign Scan on public.ft6 t2
                     Output: t2.c1
                     InfluxDB query: SELECT "c1" FROM "T4"
(17 rows)

SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1 
----+----
(0 rows)

-- unsafe join conditions (c8 has a UDT), not pushed down. Practically a CROSS
-- JOIN since c8 in both tables has same value.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Left Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c8 = t2.c8)
               ->  Sort
                     Output: t1.c1, t1.c8
                     Sort Key: t1.c8
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c8
                           InfluxDB query: SELECT "C1", "c8" FROM "T1"
               ->  Sort
                     Output: t2.c1, t2.c8
                     Sort Key: t2.c8
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.c8
                           InfluxDB query: SELECT "C1", "c8" FROM "T1"
(20 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- unsafe conditions on one side (c8 has a UDT), not pushed down.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Right Join
               Output: t1.c1, t2.c1, t1.c3
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
               ->  Hash
                     Output: t1.c1, t1.c3
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c3
                           InfluxDB query: SELECT "C1", "c3" FROM "T1" WHERE (("c8" = 'foo'))
(16 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join where unsafe to pushdown condition in WHERE clause has a column not
-- in the SELECT clause. In this test unsafe clause needs to have column
-- references from both joining sides so that the clause is not pushed down
-- into one of the joining sides.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Merge Join
               Output: t1.c1, t2.c1, t1.c3
               Merge Cond: ((t1.c1 = t2.c1) AND (t1.c8 = t2.c8))
               ->  Sort
                     Output: t1.c1, t1.c3, t1.c8
                     Sort Key: t1.c1, t1.c8
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c3, t1.c8
                           InfluxDB query: SELECT "C1", "c3", "c8" FROM "T1"
               ->  Sort
                     Output: t2.c1, t2.c8
                     Sort Key: t2.c1, t2.c8
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.c8
                           InfluxDB query: SELECT "C1", "c8" FROM "T1"
(20 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- Aggregate after UNION, for testing setrefs
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: t1.c1, (avg((t1.c1 + t2.c1)))
   ->  Sort
         Output: t1.c1, (avg((t1.c1 + t2.c1)))
         Sort Key: t1.c1
         ->  HashAggregate
               Output: t1.c1, avg((t1.c1 + t2.c1))
               Group Key: t1.c1
               ->  HashAggregate
                     Output: t1.c1, t2.c1
                     Group Key: t1.c1, t2.c1
                     ->  Append
                           ->  Merge Join
                                 Output: t1.c1, t2.c1
                                 Merge Cond: (t1.c1 = t2.c1)
                                 ->  Sort
                                       Output: t1.c1
                                       Sort Key: t1.c1
                                       ->  Foreign Scan on public.ft1 t1
                                             Output: t1.c1
                                             InfluxDB query: SELECT "C1" FROM "T1"
                                 ->  Sort
                                       Output: t2.c1
                                       Sort Key: t2.c1
                                       ->  Foreign Scan on public.ft2 t2
                                             Output: t2.c1
                                             InfluxDB query: SELECT "C1" FROM "T1"
                           ->  Merge Join
                                 Output: t1_1.c1, t2_1.c1
                                 Merge Cond: (t1_1.c1 = t2_1.c1)
                                 ->  Sort
                                       Output: t1_1.c1
                                       Sort Key: t1_1.c1
                                       ->  Foreign Scan on public.ft1 t1_1
                                             Output: t1_1.c1
                                             InfluxDB query: SELECT "C1" FROM "T1"
                                 ->  Sort
                                       Output: t2_1.c1
                                       Sort Key: t2_1.c1
                                       ->  Foreign Scan on public.ft2 t2_1
                                             Output: t2_1.c1
                                             InfluxDB query: SELECT "C1" FROM "T1"
(42 rows)

SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
 t1c1 |         avg          
------+----------------------
  101 | 202.0000000000000000
  102 | 204.0000000000000000
  103 | 206.0000000000000000
  104 | 208.0000000000000000
  105 | 210.0000000000000000
  106 | 212.0000000000000000
  107 | 214.0000000000000000
  108 | 216.0000000000000000
  109 | 218.0000000000000000
  110 | 220.0000000000000000
(10 rows)

-- join with lateral reference
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1."C1" FROM "S 1"."T1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C1" OFFSET 10 LIMIT 10;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Limit
   Output: t1."C1"
   ->  Sort
         Output: t1."C1"
         Sort Key: t1."C1"
         ->  Nested Loop
               Output: t1."C1"
               ->  Foreign Scan on "S 1"."T1" t1
                     Output: t1."time", t1."C1", t1.c2, t1.c3, t1.c6, t1.c7, t1.c8
                     InfluxDB query: SELECT "C1", "c2" FROM "T1"
               ->  Unique
                     Output: t2.c1, t3.c1
                     ->  Sort
                           Output: t2.c1, t3.c1
                           Sort Key: t2.c1
                           ->  Hash Join
                                 Output: t2.c1, t3.c1
                                 Hash Cond: (t3.c1 = t2.c1)
                                 ->  Foreign Scan on public.ft2 t3
                                       Output: t3.c1
                                       InfluxDB query: SELECT "C1" FROM "T1"
                                 ->  Hash
                                       Output: t2.c1
                                       ->  Foreign Scan on public.ft1 t2
                                             Output: t2.c1
                                             InfluxDB query: SELECT "C1" FROM "T1" WHERE (("c2" = $1))
(26 rows)

-- TODO
SELECT t1."C1" FROM "S 1"."T1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C1" OFFSET 10 LIMIT 10;
 C1 
----
  1
  1
  1
  1
  1
  1
  1
  1
  1
  1
(10 rows)

-- non-Var items in targetlist of the nullable rel of a join preventing
-- push-down in some cases
-- unable to push {ft1, ft2}
EXPLAIN (VERBOSE, COSTS OFF)
SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Nested Loop Left Join
   Output: (13), ft2.c1
   Join Filter: (13 = ft2.c1)
   ->  Foreign Scan on public.ft2
         Output: ft2.c1
         InfluxDB query: SELECT "C1" FROM "T1" WHERE (("C1" >= 10)) AND (("C1" <= 15))
   ->  Materialize
         Output: (13)
         ->  Foreign Scan on public.ft1
               Output: 13
               InfluxDB query: SELECT * FROM "T1" WHERE (("C1" = 13))
(11 rows)

SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
 a  | c1 
----+----
    | 10
    | 11
    | 12
 13 | 13
    | 14
    | 15
(6 rows)

-- ok to push {ft1, ft2} but not {ft1, ft2, ft4}
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Hash Right Join
   Output: ft4.c1, (13), ft1.c1, ft2.c1
   Hash Cond: (ft1.c1 = ft4.c1)
   ->  Nested Loop
         Output: ft1.c1, ft2.c1, 13
         ->  Foreign Scan on public.ft1
               Output: ft1.c1
               InfluxDB query: SELECT "C1" FROM "T1" WHERE (("C1" = 12))
         ->  Materialize
               Output: ft2.c1
               ->  Foreign Scan on public.ft2
                     Output: ft2.c1
                     InfluxDB query: SELECT "C1" FROM "T1" WHERE (("C1" = 12))
   ->  Hash
         Output: ft4.c1
         ->  Foreign Scan on public.ft4
               Output: ft4.c1
               InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 10)) AND (("c1" <= 15))
(18 rows)

SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
 c1 | a  | b  | c  
----+----+----+----
 12 | 13 | 12 | 12
 10 |    |    |   
 14 |    |    |   
(3 rows)

-- join with nullable side with some columns with null values
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: ft5.*, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
   Sort Key: ft5.c1
   ->  Hash Join
         Output: ft5.*, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
         Hash Cond: (ft5.c1 = ft4.c1)
         ->  Foreign Scan on public.ft5
               Output: ft5.*, ft5.c1, ft5.c2, ft5.c3
               InfluxDB query: SELECT "c1", "c2", "c3" FROM "T4"
         ->  Hash
               Output: ft4.c1, ft4.c2
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1, ft4.c2
                     InfluxDB query: SELECT "c1", "c2" FROM "T3" WHERE (("c1" >= 10)) AND (("c1" <= 30))
(14 rows)

SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
      ft5       | c1 | c2 |   c3   | c1 | c2 
----------------+----+----+--------+----+----
 (12,13,AAA012) | 12 | 13 | AAA012 | 12 | 13
 (18,19,AAA018) | 18 | 19 | AAA018 | 18 | 19
 (24,25,AAA024) | 24 | 25 | AAA024 | 24 | 25
 (30,31,AAA030) | 30 | 31 | AAA030 | 30 | 31
(4 rows)

-- multi-way join involving multiple merge joins
-- (this case used to have EPQ-related planning problems)
SET enable_nestloop TO false;
SET enable_hashjoin TO false;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1, ft2, ft4, ft5 WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 FOR UPDATE;
                                                                                                     QUERY PLAN                                                                                                     
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft4.c1, ft4.c2, ft4.c3, ft5.c1, ft5.c2, ft5.c3, ft1.*, ft2.*, ft4.*, ft5.*
   ->  Merge Join
         Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft4.c1, ft4.c2, ft4.c3, ft5.c1, ft5.c2, ft5.c3, ft1.*, ft2.*, ft4.*, ft5.*
         Merge Cond: (ft1.c2 = ft5.c1)
         ->  Merge Join
               Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft1.*, ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft2.*, ft4.c1, ft4.c2, ft4.c3, ft4.*
               Merge Cond: (ft1.c2 = ft4.c1)
               ->  Sort
                     Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft1.*, ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft2.*
                     Sort Key: ft1.c2
                     ->  Merge Join
                           Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft1.*, ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft2.*
                           Merge Cond: (ft1.c1 = ft2.c1)
                           ->  Sort
                                 Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft1.*
                                 Sort Key: ft1.c1
                                 ->  Foreign Scan on public.ft1
                                       Output: ft1."time", ft1.c1, ft1.c2, ft1.c3, ft1.c6, ft1.c7, ft1.c8, ft1.*
                                       InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" < 100))
                           ->  Sort
                                 Output: ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft2.*
                                 Sort Key: ft2.c1
                                 ->  Foreign Scan on public.ft2
                                       Output: ft2."time", ft2.c1, ft2.c2, ft2.c3, ft2.c6, ft2.c7, ft2.c8, ft2.*
                                       InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" < 100))
               ->  Sort
                     Output: ft4.c1, ft4.c2, ft4.c3, ft4.*
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1, ft4.c2, ft4.c3, ft4.*
                           InfluxDB query: SELECT "c1", "c2", "c3" FROM "T3"
         ->  Sort
               Output: ft5.c1, ft5.c2, ft5.c3, ft5.*
               Sort Key: ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1, ft5.c2, ft5.c3, ft5.*
                     InfluxDB query: SELECT "c1", "c2", "c3" FROM "T4"
(38 rows)

SELECT * FROM ft1, ft2, ft4, ft5 WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 FOR UPDATE;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  |           time           | c1 | c2 |  c3   | c6 |     c7     | c8  | c1 | c2 |   c3   | c1 | c2 |   c3   
--------------------------+----+----+-------+----+------------+-----+--------------------------+----+----+-------+----+------------+-----+----+----+--------+----+----+--------
 Tue Apr 07 00:00:00 1970 | 96 |  6 | 00096 | 6  | 6          | foo | Tue Apr 07 00:00:00 1970 | 96 |  6 | 00096 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 Mon Feb 16 00:00:00 1970 | 46 |  6 | 00046 | 6  | 6          | foo | Mon Feb 16 00:00:00 1970 | 46 |  6 | 00046 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 Tue Jan 27 00:00:00 1970 | 26 |  6 | 00026 | 6  | 6          | foo | Tue Jan 27 00:00:00 1970 | 26 |  6 | 00026 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 Thu Feb 26 00:00:00 1970 | 56 |  6 | 00056 | 6  | 6          | foo | Thu Feb 26 00:00:00 1970 | 56 |  6 | 00056 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 Sun Mar 08 00:00:00 1970 | 66 |  6 | 00066 | 6  | 6          | foo | Sun Mar 08 00:00:00 1970 | 66 |  6 | 00066 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 Sat Jan 17 00:00:00 1970 | 16 |  6 | 00016 | 6  | 6          | foo | Sat Jan 17 00:00:00 1970 | 16 |  6 | 00016 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 Wed Mar 18 00:00:00 1970 | 76 |  6 | 00076 | 6  | 6          | foo | Wed Mar 18 00:00:00 1970 | 76 |  6 | 00076 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 Sat Mar 28 00:00:00 1970 | 86 |  6 | 00086 | 6  | 6          | foo | Sat Mar 28 00:00:00 1970 | 86 |  6 | 00086 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 Wed Jan 07 00:00:00 1970 |  6 |  6 | 00006 | 6  | 6          | foo | Wed Jan 07 00:00:00 1970 |  6 |  6 | 00006 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
 Fri Feb 06 00:00:00 1970 | 36 |  6 | 00036 | 6  | 6          | foo | Fri Feb 06 00:00:00 1970 | 36 |  6 | 00036 | 6  | 6          | foo |  6 |  7 | AAA006 |  6 |  7 | AAA006
(10 rows)

RESET enable_nestloop;
RESET enable_hashjoin;
-- check join pushdown in situations where multiple userids are involved
CREATE ROLE regress_view_owner SUPERUSER;
CREATE USER MAPPING FOR regress_view_owner SERVER influxdb_svr OPTIONS (user 'user', password 'pass');
GRANT SELECT ON ft4 TO regress_view_owner;
GRANT SELECT ON ft5 TO regress_view_owner;
CREATE VIEW v4 AS SELECT * FROM ft4;
CREATE VIEW v5 AS SELECT * FROM ft5;
ALTER VIEW v5 OWNER TO regress_view_owner;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, different view owners
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Merge Right Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Merge Cond: (ft5.c1 = ft4.c1)
               ->  Sort
                     Output: ft5.c2, ft5.c1
                     Sort Key: ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c2, ft5.c1
                           InfluxDB query: SELECT "c1", "c2" FROM "T4"
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
(20 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO regress_view_owner;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Merge Right Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Merge Cond: (ft5.c1 = ft4.c1)
               ->  Sort
                     Output: ft5.c2, ft5.c1
                     Sort Key: ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c2, ft5.c1
                           InfluxDB query: SELECT "c1", "c2" FROM "T4"
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
(20 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, view owner not current user
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Merge Right Join
               Output: ft4.c1, t2.c2, t2.c1
               Merge Cond: (t2.c1 = ft4.c1)
               ->  Sort
                     Output: t2.c2, t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "c1", "c2" FROM "T4"
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
(20 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO CURRENT_USER;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Merge Right Join
               Output: ft4.c1, t2.c2, t2.c1
               Merge Cond: (t2.c1 = ft4.c1)
               ->  Sort
                     Output: t2.c2, t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c2, t2.c1
                           InfluxDB query: SELECT "c1", "c2" FROM "T4"
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
(20 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO regress_view_owner;
-- cleanup
DROP OWNED BY regress_view_owner;
DROP ROLE regress_view_owner;
-- ===================================================================
-- Aggregate and grouping queries
-- ===================================================================
-- Simple aggregates
explain (verbose, costs off)
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
                                                                    QUERY PLAN                                                                     
---------------------------------------------------------------------------------------------------------------------------------------------------
 Result
   Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), ((sum(c1)) * ((random() <= '1'::double precision))::integer), c2
   ->  Sort
         Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), c2
         Sort Key: (count(ft1.c6)), (sum(ft1.c1))
         ->  HashAggregate
               Output: count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), c2
               Group Key: ft1.c2
               ->  Foreign Scan on public.ft1
                     Output: c6, c1, c2
                     InfluxDB query: SELECT "C1", "c2", "c6" FROM "T1" WHERE (("c2" < 5))
(11 rows)

select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
 count |  sum  |         avg          | min | max  | stddev | sum2  
-------+-------+----------------------+-----+------+--------+-------
   100 | 49600 | 496.0000000000000000 |   1 |  991 |      0 | 49600
   100 | 49700 | 497.0000000000000000 |   2 |  992 |      0 | 49700
   100 | 49800 | 498.0000000000000000 |   3 |  993 |      0 | 49800
   100 | 49900 | 499.0000000000000000 |   4 |  994 |      0 | 49900
   100 | 50500 | 505.0000000000000000 |   0 | 1000 |      0 | 50500
(5 rows)

-- Aggregate is not pushed down as aggregation contains random()
explain (verbose, costs off)
select sum(c1 * (random() <= 1)::int) as sum, avg(c1) from ft1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Aggregate
   Output: sum((c1 * ((random() <= '1'::double precision))::integer)), avg(c1)
   ->  Foreign Scan on public.ft1
         Output: c1
         InfluxDB query: SELECT "C1" FROM "T1"
(5 rows)

-- Aggregate over join query
explain (verbose, costs off)
select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Aggregate
   Output: count(*), sum(t1.c1), avg(t2.c1)
   ->  Nested Loop
         Output: t1.c1, t2.c1
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1, t1.c2
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" = 6))
         ->  Materialize
               Output: t2.c1, t2.c2
               ->  Foreign Scan on public.ft1 t2
                     Output: t2.c1, t2.c2
                     InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" = 6))
(12 rows)

select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
 count |   sum   |         avg          
-------+---------+----------------------
 10000 | 5010000 | 501.0000000000000000
(1 row)

-- Not pushed down due to local conditions present in underneath input rel
explain (verbose, costs off)
select sum(t1.c1), count(t2.c1) from ft1 t1 inner join ft2 t2 on (t1.c1 = t2.c1) where ((t1.c1 * t2.c1)/(t1.c1 * t2.c1)) * random() <= 1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: sum(t1.c1), count(t2.c1)
   ->  Merge Join
         Output: t1.c1, t2.c1
         Merge Cond: (t1.c1 = t2.c1)
         Join Filter: (((((t1.c1 * t2.c1) / (t1.c1 * t2.c1)))::double precision * random()) <= '1'::double precision)
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
         ->  Sort
               Output: t2.c1
               Sort Key: t2.c1
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1
                     InfluxDB query: SELECT "C1" FROM "T1"
(18 rows)

-- GROUP BY clause having expressions
explain (verbose, costs off)
select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Sort
   Output: ((c2 / 2)), ((sum(c2) * (c2 / 2)))
   Sort Key: ((ft1.c2 / 2))
   ->  Foreign Scan
         Output: ((c2 / 2)), ((sum(c2) * (c2 / 2)))
         InfluxDB query: SELECT  FROM "T1" GROUP BY (("c2" / 2))
(6 rows)

select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
ERROR:  influxdb_fdw : error parsing query: found FROM, expected identifier, string, number, bool at line 1, char 9
-- Aggregates in subquery are pushed down.
explain (verbose, costs off)
select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Aggregate
   Output: count(ft1.c2), sum(ft1.c2)
   ->  Sort
         Output: ft1.c2, (sum(ft1.c1)), (sqrt((ft1.c1)::double precision))
         Sort Key: ft1.c2, (sum(ft1.c1))
         ->  HashAggregate
               Output: ft1.c2, sum(ft1.c1), (sqrt((ft1.c1)::double precision))
               Group Key: ft1.c2, sqrt((ft1.c1)::double precision)
               ->  Foreign Scan on public.ft1
                     Output: ft1.c2, sqrt((ft1.c1)::double precision), ft1.c1
                     InfluxDB query: SELECT "C1", "c2" FROM "T1"
(11 rows)

select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
 count | sum  
-------+------
  1000 | 4500
(1 row)

-- Aggregate is still pushed down by taking unshippable expression out
explain (verbose, costs off)
select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort
   Output: ((c2 * ((random() <= '1'::double precision))::integer)), ((sum(c1) * c2)), c2
   Sort Key: ((ft1.c2 * ((random() <= '1'::double precision))::integer)), ((sum(ft1.c1) * ft1.c2))
   ->  Foreign Scan
         Output: (c2 * ((random() <= '1'::double precision))::integer), ((sum(c1) * c2)), c2
         InfluxDB query: SELECT  FROM "T1" GROUP BY "c2"
(6 rows)

select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
ERROR:  influxdb_fdw : error parsing query: found FROM, expected identifier, string, number, bool at line 1, char 9
-- Aggregate with unshippable GROUP BY clause are not pushed
explain (verbose, costs off)
select c2 * (random() <= 1)::int as c2 from ft2 group by c2 * (random() <= 1)::int order by 1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Output: ((c2 * ((random() <= '1'::double precision))::integer))
   Sort Key: ((ft2.c2 * ((random() <= '1'::double precision))::integer))
   ->  HashAggregate
         Output: ((c2 * ((random() <= '1'::double precision))::integer))
         Group Key: (ft2.c2 * ((random() <= '1'::double precision))::integer)
         ->  Foreign Scan on public.ft2
               Output: (c2 * ((random() <= '1'::double precision))::integer)
               InfluxDB query: SELECT "c2" FROM "T1"
(9 rows)

-- GROUP BY clause in various forms, cardinal, alias and constant expression
explain (verbose, costs off)
select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Output: (count(c2)), c2, 5, 7.0, 9
   Sort Key: ft1.c2
   ->  Foreign Scan
         Output: (count(c2)), c2, 5, 7.0, 9
         InfluxDB query: SELECT count("c2") FROM "T1" GROUP BY "c2", 5, 9
(6 rows)

select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
ERROR:  influxdb_fdw : only time and tag dimensions allowed
-- GROUP BY clause referring to same column multiple times
-- Also, ORDER BY contains an aggregate function
explain (verbose, costs off)
select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
ERROR:  targetlist item has multiple sortgroupref labels
select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
ERROR:  targetlist item has multiple sortgroupref labels
-- Testing HAVING clause shippability
explain (verbose, costs off)
select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1))
   Sort Key: ft2.c2
   ->  HashAggregate
         Output: c2, sum(c1)
         Group Key: ft2.c2
         Filter: ((avg(ft2.c1) < '500'::numeric) AND (sum(ft2.c1) < 49800))
         ->  Foreign Scan on public.ft2
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(10 rows)

select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
 c2 |  sum  
----+-------
  1 | 49600
  2 | 49700
(2 rows)

-- Unshippable HAVING clause will be evaluated locally, and other qual in HAVING clause is pushed down
explain (verbose, costs off)
select count(*) from (select time, count(c1) from ft1 group by time, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*)
   ->  HashAggregate
         Output: ft1."time", NULL::bigint, (sqrt((ft1.c2)::double precision))
         Group Key: ft1."time", sqrt((ft1.c2)::double precision)
         Filter: ((avg(ft1.c1) < '500'::numeric) AND ((((avg(ft1.c1) / avg(ft1.c1)))::double precision * random()) <= '1'::double precision))
         ->  Foreign Scan on public.ft1
               Output: ft1."time", sqrt((ft1.c2)::double precision), ft1.c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(9 rows)

select count(*) from (select time, count(c1) from ft1 group by time, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
 count 
-------
   499
(1 row)

-- Aggregate in HAVING clause is not pushable, and thus aggregation is not pushed down
explain (verbose, costs off)
select sum(c1) from ft1 group by c2 having avg(c1 * (random() <= 1)::int) > 100 order by 1;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(c1)), c2
   Sort Key: (sum(ft1.c1))
   ->  HashAggregate
         Output: sum(c1), c2
         Group Key: ft1.c2
         Filter: (avg((ft1.c1 * ((random() <= '1'::double precision))::integer)) > '100'::numeric)
         ->  Foreign Scan on public.ft1
               Output: c1, c2
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(10 rows)

-- Testing ORDER BY, DISTINCT, FILTER, Ordered-sets and VARIADIC within aggregates
-- ORDER BY within aggregate, same column used to order
explain (verbose, costs off)
select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(c1 ORDER BY c1)), c2
   Sort Key: (array_agg(ft1.c1 ORDER BY ft1.c1))
   ->  GroupAggregate
         Output: array_agg(c1 ORDER BY c1), c2
         Group Key: ft1.c2
         ->  Sort
               Output: c2, c1
               Sort Key: ft1.c2
               ->  Foreign Scan on public.ft1
                     Output: c2, c1
                     InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("C1" < 100))
(12 rows)

select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
           array_agg            
--------------------------------
 {1,11,21,31,41,51,61,71,81,91}
 {2,12,22,32,42,52,62,72,82,92}
 {3,13,23,33,43,53,63,73,83,93}
 {4,14,24,34,44,54,64,74,84,94}
 {5,15,25,35,45,55,65,75,85,95}
 {6,16,26,36,46,56,66,76,86,96}
 {7,17,27,37,47,57,67,77,87,97}
 {8,18,28,38,48,58,68,78,88,98}
 {9,19,29,39,49,59,69,79,89,99}
 {10,20,30,40,50,60,70,80,90}
(10 rows)

-- ORDER BY within aggregate, different column used to order also using DESC
explain (verbose, costs off)
select array_agg(time order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Aggregate
   Output: array_agg("time" ORDER BY c1 DESC)
   ->  Foreign Scan on public.ft2
         Output: "time", c1
         InfluxDB query: SELECT "C1" FROM "T1" WHERE (("C1" < 50)) AND (("c2" = 6))
(5 rows)

select array_agg(time order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                                                array_agg                                                                 
------------------------------------------------------------------------------------------------------------------------------------------
 {"Mon Feb 16 00:00:00 1970","Fri Feb 06 00:00:00 1970","Tue Jan 27 00:00:00 1970","Sat Jan 17 00:00:00 1970","Wed Jan 07 00:00:00 1970"}
(1 row)

-- DISTINCT within aggregate
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5))), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5)))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5)), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1
               Sort Key: ((t2.c1 % 3))
               ->  Merge Full Join
                     Output: (t2.c1 % 3), t1.c1
                     Merge Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Sort
                           Output: t1.c1
                           Sort Key: t1.c1
                           ->  Foreign Scan on public.ft4 t1
                                 Output: t1.c1
                                 InfluxDB query: SELECT "c1" FROM "T3"
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "c1" FROM "T4"
(25 rows)

select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

-- DISTINCT combined with ORDER BY within aggregate
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5))), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5)))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5)), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1
               Sort Key: ((t2.c1 % 3))
               ->  Merge Full Join
                     Output: (t2.c1 % 3), t1.c1
                     Merge Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Sort
                           Output: t1.c1
                           Sort Key: t1.c1
                           ->  Foreign Scan on public.ft4 t1
                                 Output: t1.c1
                                 InfluxDB query: SELECT "c1" FROM "T3"
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "c1" FROM "T4"
(25 rows)

select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST)), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1
               Sort Key: ((t2.c1 % 3))
               ->  Merge Full Join
                     Output: (t2.c1 % 3), t1.c1
                     Merge Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Sort
                           Output: t1.c1
                           Sort Key: t1.c1
                           ->  Foreign Scan on public.ft4 t1
                                 Output: t1.c1
                                 InfluxDB query: SELECT "c1" FROM "T3"
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "c1" FROM "T4"
(25 rows)

select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {3,2,1,NULL}
 {4,3,2,1,0}
(2 rows)

-- FILTER within aggregate
explain (verbose, costs off)
select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
                                 QUERY PLAN                                 
----------------------------------------------------------------------------
 Sort
   Output: (sum(c1) FILTER (WHERE ((c1 < 100) AND (c2 > 5)))), c2
   Sort Key: (sum(ft1.c1) FILTER (WHERE ((ft1.c1 < 100) AND (ft1.c2 > 5))))
   ->  HashAggregate
         Output: sum(c1) FILTER (WHERE ((c1 < 100) AND (c2 > 5))), c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c1, c2
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(9 rows)

select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
 sum 
-----
 510
 520
 530
 540
    
    
    
    
    
    
(10 rows)

-- DISTINCT, ORDER BY and FILTER within aggregate
explain (verbose, costs off)
select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: sum((c1 % 3)), sum(DISTINCT (c1 % 3) ORDER BY (c1 % 3)) FILTER (WHERE ((c1 % 3) < 2)), c2
   Group Key: ft1.c2
   ->  Foreign Scan on public.ft1
         Output: c1, c2
         InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" = 6))
(6 rows)

select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
 sum | sum | c2 
-----+-----+----
  99 |   1 |  6
(1 row)

-- Outer query is aggregation query
explain (verbose, costs off)
select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Aggregate
               Output: (SubPlan 1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE ((("c2" % 6) = 0))
               SubPlan 1
                 ->  Foreign Scan on public.ft1 t1
                       Output: count(*) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10)))
                       InfluxDB query: SELECT * FROM "T1" WHERE (("C1" = 6))
(14 rows)

select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
 count 
-------
     1
(1 row)

-- Inner query is aggregation query
explain (verbose, costs off)
select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Foreign Scan on public.ft2 t2
               Output: (SubPlan 1)
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE ((("c2" % 6) = 0))
               SubPlan 1
                 ->  Aggregate
                       Output: count(t1.c1) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10)))
                       ->  Foreign Scan on public.ft1 t1
                             Output: t1.c1
                             InfluxDB query: SELECT "C1" FROM "T1" WHERE (("C1" = 6))
(14 rows)

select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
 count 
-------
     0
     1
(2 rows)

-- Aggregate not pushed down as FILTER condition is not pushable
explain (verbose, costs off)
select sum(c1) filter (where (c1 / c1) * random() <= 1) from ft1 group by c2 order by 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(c1) FILTER (WHERE ((((c1 / c1))::double precision * random()) <= '1'::double precision))), c2
   Sort Key: (sum(ft1.c1) FILTER (WHERE ((((ft1.c1 / ft1.c1))::double precision * random()) <= '1'::double precision)))
   ->  HashAggregate
         Output: sum(c1) FILTER (WHERE ((((c1 / c1))::double precision * random()) <= '1'::double precision)), c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c1, c2
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(9 rows)

explain (verbose, costs off)
select sum(c2) filter (where c2 in (select c2 from ft1 where c2 < 5)) from ft1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Aggregate
   Output: sum(ft1.c2) FILTER (WHERE (hashed SubPlan 1))
   ->  Foreign Scan on public.ft1
         Output: ft1.c2
         InfluxDB query: SELECT "c2" FROM "T1"
   SubPlan 1
     ->  Foreign Scan on public.ft1 ft1_1
           Output: ft1_1.c2
           InfluxDB query: SELECT "c2" FROM "T1" WHERE (("c2" < 5))
(9 rows)

-- Ordered-sets within aggregate
explain (verbose, costs off)
select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
                                                                                          QUERY PLAN                                                                                           
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate
   Output: c2, rank('10'::character varying) WITHIN GROUP (ORDER BY c6), percentile_cont((((c2)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((c1)::double precision))
   Group Key: ft1.c2
   Filter: (percentile_cont((((ft1.c2)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((ft1.c1)::double precision)) < '500'::double precision)
   ->  Sort
         Output: c2, c6, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c6, c1
               InfluxDB query: SELECT "C1", "c2", "c6" FROM "T1" WHERE (("c2" < 10))
(10 rows)

select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
 c2 | rank | percentile_cont 
----+------+-----------------
  0 |  101 |              10
  1 |  101 |             100
  2 |    1 |             200
  3 |    1 |             300
  4 |    1 |             400
(5 rows)

-- Using multiple arguments within aggregates
explain (verbose, costs off)
select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 GroupAggregate
   Output: c1, rank(c1, c2) WITHIN GROUP (ORDER BY c1, c2), c2
   Group Key: ft1.c1, ft1.c2
   ->  Sort
         Output: c1, c2
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c1, c2
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("C1" = 6))
(9 rows)

select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
 c1 | rank 
----+------
  6 |    1
(1 row)

-- User defined function for user defined aggregate, VARIADIC
create function least_accum(anyelement, variadic anyarray)
returns anyelement language sql as
  'select least($1, min($2[i])) from generate_subscripts($2,1) g(i)';
create aggregate least_agg(variadic items anyarray) (
  stype = anyelement, sfunc = least_accum
);
-- Disable hash aggregation for plan stability.
set enable_hashagg to false;
-- Not pushed down due to user defined aggregate
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 group by c2 order by c2;
                        QUERY PLAN                         
-----------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Sort
         Output: c2, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(9 rows)

-- Add function and aggregate into extension
alter extension influxdb_fdw add function least_accum(anyelement, variadic anyarray);
alter extension influxdb_fdw add aggregate least_agg(variadic items anyarray);
-- Now aggregate will be pushed.  Aggregate will display VARIADIC argument.
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Sort
         Output: c2, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" < 100))
(9 rows)

select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
 c2 | least_agg 
----+-----------
  0 |        10
  1 |         1
  2 |         2
  3 |         3
  4 |         4
  5 |         5
  6 |         6
  7 |         7
  8 |         8
  9 |         9
(10 rows)

-- Remove function and aggregate from extension
alter extension influxdb_fdw drop function least_accum(anyelement, variadic anyarray);
alter extension influxdb_fdw drop aggregate least_agg(variadic items anyarray);
-- Not pushed down as we have dropped objects from extension.
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 group by c2 order by c2;
                        QUERY PLAN                         
-----------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Sort
         Output: c2, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1"
(9 rows)

-- Cleanup
reset enable_hashagg;
drop aggregate least_agg(variadic items anyarray);
drop function least_accum(anyelement, variadic anyarray);
-- Testing USING OPERATOR() in ORDER BY within aggregate.
-- For this, we need user defined operators along with operator family and
-- operator class.  Create those and then add them in extension.  Note that
-- user defined objects are considered unshippable unless they are part of
-- the extension.
create operator public.<^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4eq
);
create operator public.=^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4lt
);
create operator public.>^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4gt
);
create operator family my_op_family using btree;
create function my_op_cmp(a int, b int) returns int as
  $$begin return btint4cmp(a, b); end $$ language plpgsql;
create operator class my_op_class for type int using btree family my_op_family as
 operator 1 public.<^,
 operator 3 public.=^,
 operator 5 public.>^,
 function 1 my_op_cmp(int, int);
-- This will not be pushed as user defined sort operator is not part of the
-- extension yet.
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2
         Output: c1, c2
         InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("C1" < 100)) AND (("c2" = 6))
(6 rows)

-- Add into extension
alter extension influxdb_fdw add operator class my_op_class using btree;
alter extension influxdb_fdw add function my_op_cmp(a int, b int);
alter extension influxdb_fdw add operator family my_op_family using btree;
alter extension influxdb_fdw add operator public.<^(int, int);
alter extension influxdb_fdw add operator public.=^(int, int);
alter extension influxdb_fdw add operator public.>^(int, int);
-- Now this will be pushed as sort operator is part of the extension.
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2
         Output: c1, c2
         InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("C1" < 100)) AND (("c2" = 6))
(6 rows)

select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
           array_agg            
--------------------------------
 {6,16,26,36,46,56,66,76,86,96}
(1 row)

-- Remove from extension
alter extension influxdb_fdw drop operator class my_op_class using btree;
alter extension influxdb_fdw drop function my_op_cmp(a int, b int);
alter extension influxdb_fdw drop operator family my_op_family using btree;
alter extension influxdb_fdw drop operator public.<^(int, int);
alter extension influxdb_fdw drop operator public.=^(int, int);
alter extension influxdb_fdw drop operator public.>^(int, int);
-- This will not be pushed as sort operator is now removed from the extension.
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2
         Output: c1, c2
         InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("C1" < 100)) AND (("c2" = 6))
(6 rows)

-- Cleanup
drop operator class my_op_class using btree;
drop function my_op_cmp(a int, b int);
drop operator family my_op_family using btree;
drop operator public.>^(int, int);
drop operator public.=^(int, int);
drop operator public.<^(int, int);
-- Input relation to aggregate push down hook is not safe to pushdown and thus
-- the aggregate cannot be pushed down to foreign server.
explain (verbose, costs off)
select count(t1.c3) from ft2 t1 left join ft2 t2 on (t1.c1 = random() * t2.c2);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Nested Loop Left Join
         Output: t1.c3
         Join Filter: ((t1.c1)::double precision = (random() * (t2.c2)::double precision))
         ->  Foreign Scan on public.ft2 t1
               Output: t1.c3, t1.c1
               InfluxDB query: SELECT "C1", "c3" FROM "T1"
         ->  Materialize
               Output: t2.c2
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2
                     InfluxDB query: SELECT "c2" FROM "T1"
(13 rows)

-- Subquery in FROM clause having aggregate
explain (verbose, costs off)
select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort
   Output: (count(*)), x.b
   Sort Key: (count(*)), x.b
   ->  GroupAggregate
         Output: count(*), x.b
         Group Key: x.b
         ->  Sort
               Output: x.b
               Sort Key: x.b
               ->  Hash Join
                     Output: x.b
                     Inner Unique: true
                     Hash Cond: (ft1.c2 = x.a)
                     ->  Foreign Scan on public.ft1
                           Output: ft1.c2
                           InfluxDB query: SELECT "c2" FROM "T1"
                     ->  Hash
                           Output: x.b, x.a
                           ->  Subquery Scan on x
                                 Output: x.b, x.a
                                 ->  Foreign Scan
                                       Output: ft1_1.c2, (sum(ft1_1.c1))
                                       InfluxDB query: SELECT sum("C1") FROM "T1" GROUP BY "c2"
(23 rows)

select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
ERROR:  invalid input syntax for integer: ""
-- FULL join with IS NULL check in HAVING
explain (verbose, costs off)
select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort
   Output: (avg(t1.c1)), (sum(t2.c1)), t2.c1
   Sort Key: (avg(t1.c1)), (sum(t2.c1))
   ->  HashAggregate
         Output: avg(t1.c1), sum(t2.c1), t2.c1
         Group Key: t2.c1
         Filter: (((avg(t1.c1) IS NULL) AND (sum(t2.c1) < 10)) OR (sum(t2.c1) IS NULL))
         ->  Merge Full Join
               Output: t2.c1, t1.c1
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           InfluxDB query: SELECT "c1" FROM "T3"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           InfluxDB query: SELECT "c1" FROM "T4"
(22 rows)

select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
         avg         | sum 
---------------------+-----
 51.0000000000000000 |    
                     |   3
                     |   9
(3 rows)

-- Aggregate over FULL join needing to deparse the joining relations as
-- subqueries.
explain (verbose, costs off)
select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*), sum(ft4.c1), avg(ft5.c1)
   ->  Hash Full Join
         Output: ft4.c1, ft5.c1
         Hash Cond: (ft4.c1 = ft5.c1)
         ->  Foreign Scan on public.ft4
               Output: ft4.c1, ft4.c2, ft4.c3
               InfluxDB query: SELECT "c1" FROM "T3" WHERE (("c1" >= 50)) AND (("c1" <= 60))
         ->  Hash
               Output: ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1
                     InfluxDB query: SELECT "c1" FROM "T4" WHERE (("c1" >= 50)) AND (("c1" <= 60))
(13 rows)

select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
 count | sum |         avg         
-------+-----+---------------------
     8 | 330 | 55.5000000000000000
(1 row)

-- ORDER BY expression is part of the target list but not pushed down to
-- foreign server.
explain (verbose, costs off)
select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: (((sum(c2)) * ((random() <= '1'::double precision))::integer))
   Sort Key: (((sum(ft1.c2)) * ((random() <= '1'::double precision))::integer))
   ->  Foreign Scan
         Output: ((sum(c2)) * ((random() <= '1'::double precision))::integer)
         InfluxDB query: SELECT sum("c2") FROM "T1"
(6 rows)

select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
 sum  
------
 4500
(1 row)

-- LATERAL join, with parameterization
set enable_hashagg to false;
explain (verbose, costs off)
select c2, sum from "S 1"."T1" t1, lateral (select sum(t2.c1 + t1."C1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C1" < 100 order by 1;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: t1.c2, qry.sum
   Sort Key: t1.c2
   ->  Nested Loop
         Output: t1.c2, qry.sum
         ->  Foreign Scan on "S 1"."T1" t1
               Output: t1."time", t1."C1", t1.c2, t1.c3, t1.c6, t1.c7, t1.c8
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" < 3)) AND (("C1" < 100))
         ->  Subquery Scan on qry
               Output: qry.sum, t2.c1
               Filter: (((t1.c2 * 2))::numeric = qry.sum)
               ->  GroupAggregate
                     Output: sum((t2.c1 + t1."C1")), t2.c1
                     Group Key: t2.c1
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.c1
                                 InfluxDB query: SELECT "C1" FROM "T1"
(20 rows)

select c2, sum from "S 1"."T1" t1, lateral (select sum(t2.c1 + t1."C1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C1" < 100 order by 1;
 c2 | sum 
----+-----
  1 |   2
  2 |   4
(2 rows)

reset enable_hashagg;
-- Check with placeHolderVars
explain (verbose, costs off)
select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Aggregate
   Output: sum(q.a), count(q.b)
   ->  Nested Loop Left Join
         Output: q.a, q.b
         Inner Unique: true
         Join Filter: ((ft4.c1)::numeric <= q.b)
         ->  Foreign Scan on public.ft4
               Output: ft4.c1, ft4.c2, ft4.c3
               InfluxDB query: SELECT "c1" FROM "T3"
         ->  Materialize
               Output: q.a, q.b
               ->  Subquery Scan on q
                     Output: q.a, q.b
                     ->  Aggregate
                           Output: 13, avg(ft1.c1), NULL::bigint
                           ->  Merge Left Join
                                 Output: ft1.c1
                                 Merge Cond: (ft2.c1 = ft1.c1)
                                 ->  Sort
                                       Output: ft2.c1
                                       Sort Key: ft2.c1
                                       ->  Foreign Scan on public.ft2
                                             Output: ft2.c1
                                             InfluxDB query: SELECT "C1" FROM "T1"
                                 ->  Sort
                                       Output: ft1.c1
                                       Sort Key: ft1.c1
                                       ->  Foreign Scan on public.ft1
                                             Output: ft1.c1
                                             InfluxDB query: SELECT "C1" FROM "T1"
(30 rows)

select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
 sum | count 
-----+-------
 650 |    50
(1 row)

-- Not supported cases
-- Grouping sets
explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1))
   Sort Key: ft1.c2
   ->  MixedAggregate
         Output: c2, sum(c1)
         Hash Key: ft1.c2
         Group Key: ()
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" < 3))
(10 rows)

select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
 c2 |  sum   
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1))
   Sort Key: ft1.c2
   ->  MixedAggregate
         Output: c2, sum(c1)
         Hash Key: ft1.c2
         Group Key: ()
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" < 3))
(10 rows)

select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
 c2 |  sum   
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

explain (verbose, costs off)
select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort
   Output: c2, c6, (sum(c1))
   Sort Key: ft1.c2, ft1.c6
   ->  HashAggregate
         Output: c2, c6, sum(c1)
         Hash Key: ft1.c2
         Hash Key: ft1.c6
         ->  Foreign Scan on public.ft1
               Output: c2, c6, c1
               InfluxDB query: SELECT "C1", "c2", "c6" FROM "T1" WHERE (("c2" < 3))
(10 rows)

select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
 c2 | c6 |  sum  
----+----+-------
  0 |    | 50500
  1 |    | 49600
  2 |    | 49700
    | 0  | 50500
    | 1  | 49600
    | 2  | 49700
(6 rows)

explain (verbose, costs off)
select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1)), (GROUPING(c2))
   Sort Key: ft1.c2
   ->  HashAggregate
         Output: c2, sum(c1), GROUPING(c2)
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               InfluxDB query: SELECT "C1", "c2" FROM "T1" WHERE (("c2" < 3))
(9 rows)

select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
 c2 |  sum  | grouping 
----+-------+----------
  0 | 50500 |        0
  1 | 49600 |        0
  2 | 49700 |        0
(3 rows)

-- DISTINCT itself is not pushed down, whereas underneath aggregate is pushed
explain (verbose, costs off)
select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Unique
   Output: ((sum(c1) / 1000)), c2
   ->  Sort
         Output: ((sum(c1) / 1000)), c2
         Sort Key: ((sum(ft2.c1) / 1000))
         ->  Foreign Scan
               Output: ((sum(c1) / 1000)), c2
               InfluxDB query: SELECT  FROM "T1" WHERE (("c2" < 6)) GROUP BY "c2"
(8 rows)

select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
ERROR:  influxdb_fdw : error parsing query: found FROM, expected identifier, string, number, bool at line 1, char 9
-- WindowAgg
explain (verbose, costs off)
select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c2)), (count(c2) OVER (?)), ((c2 % 2))
   Sort Key: ft2.c2
   ->  WindowAgg
         Output: c2, (sum(c2)), count(c2) OVER (?), ((c2 % 2))
         ->  Sort
               Output: c2, ((c2 % 2)), (sum(c2))
               Sort Key: ((ft2.c2 % 2))
               ->  Foreign Scan
                     Output: c2, ((c2 % 2)), (sum(c2))
                     InfluxDB query: SELECT sum("c2") FROM "T1" WHERE (("c2" < 10)) GROUP BY "c2"
(11 rows)

select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
ERROR:  invalid input syntax for integer: ""
explain (verbose, costs off)
select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort
   Output: c2, (array_agg(c2) OVER (?)), ((c2 % 2))
   Sort Key: ft1.c2
   ->  WindowAgg
         Output: c2, array_agg(c2) OVER (?), ((c2 % 2))
         ->  Sort
               Output: c2, ((c2 % 2))
               Sort Key: ((ft1.c2 % 2)), ft1.c2 DESC
               ->  Foreign Scan
                     Output: c2, ((c2 % 2))
                     InfluxDB query: SELECT  FROM "T1" WHERE (("c2" < 10)) GROUP BY "c2"
(11 rows)

select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
ERROR:  influxdb_fdw : error parsing query: found FROM, expected identifier, string, number, bool at line 1, char 9
explain (verbose, costs off)
select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort
   Output: c2, (array_agg(c2) OVER (?)), ((c2 % 2))
   Sort Key: ft1.c2
   ->  WindowAgg
         Output: c2, array_agg(c2) OVER (?), ((c2 % 2))
         ->  Sort
               Output: c2, ((c2 % 2))
               Sort Key: ((ft1.c2 % 2)), ft1.c2
               ->  Foreign Scan
                     Output: c2, ((c2 % 2))
                     InfluxDB query: SELECT  FROM "T1" WHERE (("c2" < 10)) GROUP BY "c2"
(11 rows)

select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
ERROR:  influxdb_fdw : error parsing query: found FROM, expected identifier, string, number, bool at line 1, char 9
-- ===================================================================
-- parameterized queries
-- ===================================================================
-- simple join
PREPARE st1(int, int) AS SELECT t1.c3, t2.c3 FROM ft1 t1, ft2 t2 WHERE t1.c1 = $1 AND t2.c1 = $2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st1(1, 2);
                               QUERY PLAN                               
------------------------------------------------------------------------
 Nested Loop
   Output: t1.c3, t2.c3
   ->  Foreign Scan on public.ft1 t1
         Output: t1.c3
         InfluxDB query: SELECT "c3" FROM "T1" WHERE (("C1" = 1))
   ->  Materialize
         Output: t2.c3
         ->  Foreign Scan on public.ft2 t2
               Output: t2.c3
               InfluxDB query: SELECT "c3" FROM "T1" WHERE (("C1" = 2))
(10 rows)

EXECUTE st1(1, 1);
  c3   |  c3   
-------+-------
 00001 | 00001
(1 row)

EXECUTE st1(101, 101);
  c3   |  c3   
-------+-------
 00101 | 00101
(1 row)

-- subquery using stable function (can't be sent to remote)
PREPARE st2(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(time) = '1970-01-17'::date) ORDER BY c1;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st2(10, 20);
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: t1."time", t1.c1, t1.c2, t1.c3, t1.c6, t1.c7, t1.c8
   Sort Key: t1.c1
   ->  Hash Semi Join
         Output: t1."time", t1.c1, t1.c2, t1.c3, t1.c6, t1.c7, t1.c8
         Hash Cond: (t1.c3 = t2.c3)
         ->  Foreign Scan on public.ft1 t1
               Output: t1."time", t1.c1, t1.c2, t1.c3, t1.c6, t1.c7, t1.c8
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" < 20))
         ->  Hash
               Output: t2.c3
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c3
                     Filter: (date(t2."time") = '01-17-1970'::date)
                     InfluxDB query: SELECT "c3" FROM "T1" WHERE (("C1" > 10))
(15 rows)

EXECUTE st2(10, 20);
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Sat Jan 17 00:00:00 1970 | 16 |  6 | 00016 | 6  | 6          | foo
(1 row)

EXECUTE st2(101, 121);
 time | c1 | c2 | c3 | c6 | c7 | c8 
------+----+----+----+----+----+----
(0 rows)

-- subquery using immutable function (can be sent to remote)
PREPARE st3(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(time) = '1970-01-17'::date) ORDER BY c1;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st3(10, 20);
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: t1."time", t1.c1, t1.c2, t1.c3, t1.c6, t1.c7, t1.c8
   Sort Key: t1.c1
   ->  Hash Semi Join
         Output: t1."time", t1.c1, t1.c2, t1.c3, t1.c6, t1.c7, t1.c8
         Hash Cond: (t1.c3 = t2.c3)
         ->  Foreign Scan on public.ft1 t1
               Output: t1."time", t1.c1, t1.c2, t1.c3, t1.c6, t1.c7, t1.c8
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" < 20))
         ->  Hash
               Output: t2.c3
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c3
                     Filter: (date(t2."time") = '01-17-1970'::date)
                     InfluxDB query: SELECT "c3" FROM "T1" WHERE (("C1" > 10))
(15 rows)

EXECUTE st3(10, 20);
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Sat Jan 17 00:00:00 1970 | 16 |  6 | 00016 | 6  | 6          | foo
(1 row)

EXECUTE st3(20, 30);
 time | c1 | c2 | c3 | c6 | c7 | c8 
------+----+----+----+----+----+----
(0 rows)

-- custom plan should be chosen initially
PREPARE st4(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 = $1;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                        QUERY PLAN                                        
------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = 1))
(3 rows)

-- once we try it enough times, should switch to generic plan
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = $1))
(3 rows)

-- value of $1 should not be sent to remote
PREPARE st5(text,int) AS SELECT * FROM ft1 t1 WHERE c8 = $1 and c1 = $2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c8" = 'foo')) AND (("C1" = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c8" = 'foo')) AND (("C1" = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c8" = 'foo')) AND (("C1" = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c8" = 'foo')) AND (("C1" = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c8" = 'foo')) AND (("C1" = 1))
(3 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                                 QUERY PLAN                                                  
-------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("c8" = $1)) AND (("C1" = $2))
(3 rows)

EXECUTE st5('foo', 1);
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

-- altering FDW options requires replanning
PREPARE st6 AS SELECT * FROM ft1 t1 WHERE t1.c1 = t1.c2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1" WHERE (("C1" = "c2"))
(3 rows)

ALTER TABLE "S 1"."T1" RENAME TO "T0";
ALTER FOREIGN TABLE ft1 OPTIONS (SET table 'T0');
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: "time", c1, c2, c3, c6, c7, c8
   InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T0" WHERE (("C1" = "c2"))
(3 rows)

EXECUTE st6;
 time | c1 | c2 | c3 | c6 | c7 | c8 
------+----+----+----+----+----+----
(0 rows)

ALTER TABLE "S 1"."T0" RENAME TO "T1";
ALTER FOREIGN TABLE ft1 OPTIONS (SET table 'T1');
EXECUTE st6;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
 Sun Jan 04 00:00:00 1970 |  3 |  3 | 00003 | 3  | 3          | foo
 Mon Jan 05 00:00:00 1970 |  4 |  4 | 00004 | 4  | 4          | foo
 Tue Jan 06 00:00:00 1970 |  5 |  5 | 00005 | 5  | 5          | foo
 Wed Jan 07 00:00:00 1970 |  6 |  6 | 00006 | 6  | 6          | foo
 Thu Jan 08 00:00:00 1970 |  7 |  7 | 00007 | 7  | 7          | foo
 Fri Jan 09 00:00:00 1970 |  8 |  8 | 00008 | 8  | 8          | foo
 Sat Jan 10 00:00:00 1970 |  9 |  9 | 00009 | 9  | 9          | foo
(9 rows)

PREPARE st8 AS SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                        QUERY PLAN                         
-----------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         InfluxDB query: SELECT "C1", "c2", "c3" FROM "T1"
(6 rows)

EXECUTE st8;
 count 
-------
     9
(1 row)

-- cleanup
DEALLOCATE st1;
DEALLOCATE st2;
DEALLOCATE st3;
DEALLOCATE st4;
DEALLOCATE st5;
DEALLOCATE st6;
DEALLOCATE st8;
-- System columns, except ctid and oid, should not be sent to remote
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'pg_class'::regclass LIMIT 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: "time", c1, c2, c3, c6, c7, c8
   ->  Foreign Scan on public.ft1 t1
         Output: "time", c1, c2, c3, c6, c7, c8
         Filter: (t1.tableoid = '1259'::oid)
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(6 rows)

SELECT * FROM ft1 t1 WHERE t1.tableoid = 'ft1'::regclass LIMIT 1;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: ((tableoid)::regclass), "time", c1, c2, c3, c6, c7, c8
   ->  Foreign Scan on public.ft1 t1
         Output: (tableoid)::regclass, "time", c1, c2, c3, c6, c7, c8
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(5 rows)

SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
 tableoid |           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
----------+--------------------------+----+----+-------+----+------------+-----
 ft1      | Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT ctid, * FROM ft1 t1 LIMIT 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: ctid, "time", c1, c2, c3, c6, c7, c8
   ->  Foreign Scan on public.ft1 t1
         Output: ctid, "time", c1, c2, c3, c6, c7, c8
         InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(5 rows)

SELECT ctid, * FROM ft1 t1 LIMIT 1;
      ctid      |           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
----------------+--------------------------+----+----+-------+----+------------+-----
 (4294967295,0) | Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

-- ===================================================================
-- used in PL/pgSQL function
-- ===================================================================
CREATE OR REPLACE FUNCTION f_test(p_c1 int) RETURNS int AS $$
DECLARE
	v_c1 int;
BEGIN
    SELECT c1 INTO v_c1 FROM ft1 WHERE c1 = p_c1 LIMIT 1;
    PERFORM c1 FROM ft1 WHERE c1 = p_c1 AND p_c1 = v_c1 LIMIT 1;
    RETURN v_c1;
END;
$$ LANGUAGE plpgsql;
SELECT f_test(100);
 f_test 
--------
    100
(1 row)

DROP FUNCTION f_test(int);
-- ===================================================================
-- conversion error
-- ===================================================================
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE int;
SELECT * FROM ft1 WHERE c1 = 1;  -- ERROR
ERROR:  invalid input syntax for integer: "foo"
SELECT  ft1.c1,  ft2.c2, ft1.c8 FROM ft1, ft2 WHERE ft1.c1 = ft2.c1 AND ft1.c1 = 1; -- ERROR
ERROR:  invalid input syntax for integer: "foo"
SELECT  ft1.c1,  ft2.c2, ft1 FROM ft1, ft2 WHERE ft1.c1 = ft2.c1 AND ft1.c1 = 1; -- ERROR
ERROR:  invalid input syntax for integer: "foo"
SELECT sum(c2), array_agg(c8) FROM ft1 GROUP BY c8; -- ERROR
ERROR:  invalid input syntax for integer: "foo"
ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE text;
SELECT * FROM ft1 WHERE c1 = 1;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

-- ===================================================================
-- subtransaction
--  + local/remote error doesn't break cursor
-- ===================================================================
BEGIN;
DECLARE c CURSOR FOR SELECT * FROM ft1 ORDER BY c1;
FETCH c;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

SAVEPOINT s;
ERROR OUT;          -- ERROR
ERROR:  syntax error at or near "ERROR"
LINE 1: ERROR OUT;
        ^
ROLLBACK TO s;
FETCH c;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
(1 row)

SAVEPOINT s;
SELECT * FROM ft1 WHERE 1 / (c1 - 1) > 0;  -- ERROR
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Sat Jan 03 00:00:00 1970 |  2 |  2 | 00002 | 2  | 2          | foo
(1 row)

ROLLBACK TO s;
FETCH c;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Sun Jan 04 00:00:00 1970 |  3 |  3 | 00003 | 3  | 3          | foo
(1 row)

SELECT * FROM ft1 ORDER BY c1 LIMIT 1;
           time           | c1 | c2 |  c3   | c6 |     c7     | c8  
--------------------------+----+----+-------+----+------------+-----
 Fri Jan 02 00:00:00 1970 |  1 |  1 | 00001 | 1  | 1          | foo
(1 row)

COMMIT;
-- ===================================================================
-- test handling of collations
-- ===================================================================
create table loct3 (f1 text collate "C" unique, f2 text, f3 varchar(10) unique);
create foreign table ft3 (f1 text collate "C", f2 text, f3 varchar(10))
  server influxdb_svr options (table 'loct3');
-- can be sent to remote
explain (verbose, costs off) select * from ft3 where f1 = 'foo';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3" WHERE (("f1" = 'foo'))
(3 rows)

explain (verbose, costs off) select * from ft3 where f1 COLLATE "C" = 'foo';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3" WHERE (("f1" = 'foo'))
(3 rows)

explain (verbose, costs off) select * from ft3 where f2 = 'foo';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3" WHERE (("f2" = 'foo'))
(3 rows)

explain (verbose, costs off) select * from ft3 where f3 = 'foo';
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3" WHERE (("f3" = 'foo'))
(3 rows)

explain (verbose, costs off) select * from ft3 f, loct3 l
  where f.f3 = l.f3 and l.f1 = 'foo';
                          QUERY PLAN                          
--------------------------------------------------------------
 Nested Loop
   Output: f.f1, f.f2, f.f3, l.f1, l.f2, l.f3
   Join Filter: ((f.f3)::text = (l.f3)::text)
   ->  Index Scan using loct3_f1_key on public.loct3 l
         Output: l.f1, l.f2, l.f3
         Index Cond: (l.f1 = 'foo'::text)
   ->  Foreign Scan on public.ft3 f
         Output: f.f1, f.f2, f.f3
         InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3"
(9 rows)

-- can't be sent to remote
explain (verbose, costs off) select * from ft3 where f1 COLLATE "POSIX" = 'foo';
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: ((ft3.f1)::text = 'foo'::text)
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3"
(4 rows)

explain (verbose, costs off) select * from ft3 where f1 = 'foo' COLLATE "C";
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: (ft3.f1 = 'foo'::text COLLATE "C")
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3"
(4 rows)

explain (verbose, costs off) select * from ft3 where f2 COLLATE "C" = 'foo';
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: ((ft3.f2)::text = 'foo'::text)
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3"
(4 rows)

explain (verbose, costs off) select * from ft3 where f2 = 'foo' COLLATE "C";
                       QUERY PLAN                       
--------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3
   Filter: (ft3.f2 = 'foo'::text COLLATE "C")
   InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3"
(4 rows)

explain (verbose, costs off) select * from ft3 f, loct3 l
  where f.f3 = l.f3 COLLATE "POSIX" and l.f1 = 'foo';
                          QUERY PLAN                          
--------------------------------------------------------------
 Nested Loop
   Output: f.f1, f.f2, f.f3, l.f1, l.f2, l.f3
   Join Filter: ((f.f3)::text = (l.f3)::text)
   ->  Index Scan using loct3_f1_key on public.loct3 l
         Output: l.f1, l.f2, l.f3
         Index Cond: (l.f1 = 'foo'::text)
   ->  Foreign Scan on public.ft3 f
         Output: f.f1, f.f2, f.f3
         InfluxDB query: SELECT "f1", "f2", "f3" FROM "loct3"
(9 rows)

-- Above DMLs add data with c6 as NULL in ft1, so test ORDER BY NULLS LAST and NULLs
-- FIRST behavior here.
-- ORDER BY DESC NULLS LAST options
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: "time", c1, c2, c3, c6, c7, c8
   ->  Sort
         Output: "time", c1, c2, c3, c6, c7, c8
         Sort Key: ft1.c6 DESC NULLS LAST, ft1.c1
         ->  Foreign Scan on public.ft1
               Output: "time", c1, c2, c3, c6, c7, c8
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(8 rows)

SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795  LIMIT 10;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Thu Aug 10 00:00:00 1972 | 952 |  2 | 00952 | 2  | 2          | foo
 Sun Aug 20 00:00:00 1972 | 962 |  2 | 00962 | 2  | 2          | foo
 Wed Aug 30 00:00:00 1972 | 972 |  2 | 00972 | 2  | 2          | foo
 Sat Sep 09 00:00:00 1972 | 982 |  2 | 00982 | 2  | 2          | foo
 Tue Sep 19 00:00:00 1972 | 992 |  2 | 00992 | 2  | 2          | foo
 Fri Jan 02 00:00:00 1970 |   1 |  1 | 00001 | 1  | 1          | foo
 Mon Jan 12 00:00:00 1970 |  11 |  1 | 00011 | 1  | 1          | foo
 Thu Jan 22 00:00:00 1970 |  21 |  1 | 00021 | 1  | 1          | foo
 Sun Feb 01 00:00:00 1970 |  31 |  1 | 00031 | 1  | 1          | foo
 Wed Feb 11 00:00:00 1970 |  41 |  1 | 00041 | 1  | 1          | foo
(10 rows)

-- ORDER BY DESC NULLS FIRST options
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: "time", c1, c2, c3, c6, c7, c8
   ->  Sort
         Output: "time", c1, c2, c3, c6, c7, c8
         Sort Key: ft1.c6 DESC, ft1.c1
         ->  Foreign Scan on public.ft1
               Output: "time", c1, c2, c3, c6, c7, c8
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(8 rows)

SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Tue Jun 09 00:00:00 1970 | 159 |  9 | 00159 | 9  | 9          | foo
 Fri Jun 19 00:00:00 1970 | 169 |  9 | 00169 | 9  | 9          | foo
 Mon Jun 29 00:00:00 1970 | 179 |  9 | 00179 | 9  | 9          | foo
 Thu Jul 09 00:00:00 1970 | 189 |  9 | 00189 | 9  | 9          | foo
 Sun Jul 19 00:00:00 1970 | 199 |  9 | 00199 | 9  | 9          | foo
 Wed Jul 29 00:00:00 1970 | 209 |  9 | 00209 | 9  | 9          | foo
 Sat Aug 08 00:00:00 1970 | 219 |  9 | 00219 | 9  | 9          | foo
 Tue Aug 18 00:00:00 1970 | 229 |  9 | 00229 | 9  | 9          | foo
 Fri Aug 28 00:00:00 1970 | 239 |  9 | 00239 | 9  | 9          | foo
 Mon Sep 07 00:00:00 1970 | 249 |  9 | 00249 | 9  | 9          | foo
(10 rows)

-- ORDER BY ASC NULLS FIRST options
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
                                    QUERY PLAN                                     
-----------------------------------------------------------------------------------
 Limit
   Output: "time", c1, c2, c3, c6, c7, c8
   ->  Sort
         Output: "time", c1, c2, c3, c6, c7, c8
         Sort Key: ft1.c6 NULLS FIRST, ft1.c1
         ->  Foreign Scan on public.ft1
               Output: "time", c1, c2, c3, c6, c7, c8
               InfluxDB query: SELECT "C1", "c2", "c3", "c6", "c7", "c8" FROM "T1"
(8 rows)

SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
           time           | c1  | c2 |  c3   | c6 |     c7     | c8  
--------------------------+-----+----+-------+----+------------+-----
 Wed Jun 10 00:00:00 1970 | 160 |  0 | 00160 | 0  | 0          | foo
 Sat Jun 20 00:00:00 1970 | 170 |  0 | 00170 | 0  | 0          | foo
 Tue Jun 30 00:00:00 1970 | 180 |  0 | 00180 | 0  | 0          | foo
 Fri Jul 10 00:00:00 1970 | 190 |  0 | 00190 | 0  | 0          | foo
 Mon Jul 20 00:00:00 1970 | 200 |  0 | 00200 | 0  | 0          | foo
 Thu Jul 30 00:00:00 1970 | 210 |  0 | 00210 | 0  | 0          | foo
 Sun Aug 09 00:00:00 1970 | 220 |  0 | 00220 | 0  | 0          | foo
 Wed Aug 19 00:00:00 1970 | 230 |  0 | 00230 | 0  | 0          | foo
 Sat Aug 29 00:00:00 1970 | 240 |  0 | 00240 | 0  | 0          | foo
 Tue Sep 08 00:00:00 1970 | 250 |  0 | 00250 | 0  | 0          | foo
(10 rows)

-- ===================================================================
-- test tuple routing for foreign-table partitions
-- ===================================================================
-- Test insert tuple routing
-- create table itrtest (a int, b text) partition by list (a);
-- create foreign table remp1 (a int check (a in (1)), b text) server influxdb_svr options (table 'loct1');
-- create foreign table remp2 (a int check (a in (2)), b text) server influxdb_svr options (table 'loct2');
-- alter table itrtest attach partition remp1 for values in (1);
-- alter table itrtest attach partition remp2 for values in (2);
-- select tableoid::regclass, * FROM itrtest;
-- select tableoid::regclass, * FROM remp1;
-- select tableoid::regclass, * FROM remp2;
-- ===================================================================
-- test IMPORT FOREIGN SCHEMA
-- ===================================================================
CREATE SCHEMA import_influx1;
IMPORT FOREIGN SCHEMA public FROM SERVER influxdb_svr INTO import_influx1;
\det+ import_influx1.*
                               List of foreign tables
     Schema     |    Table    |    Server    |       FDW options       | Description 
----------------+-------------+--------------+-------------------------+-------------
 import_influx1 | T1          | influxdb_svr | ("table" 'T1')          | 
 import_influx1 | T2          | influxdb_svr | ("table" 'T2')          | 
 import_influx1 | T3          | influxdb_svr | ("table" 'T3')          | 
 import_influx1 | T4          | influxdb_svr | ("table" 'T4')          | 
 import_influx1 | T5          | influxdb_svr | ("table" 'T5')          | 
 import_influx1 | fprt1_p1    | influxdb_svr | ("table" 'fprt1_p1')    | 
 import_influx1 | fprt1_p2    | influxdb_svr | ("table" 'fprt1_p2')    | 
 import_influx1 | fprt2_p1    | influxdb_svr | ("table" 'fprt2_p1')    | 
 import_influx1 | fprt2_p2    | influxdb_svr | ("table" 'fprt2_p2')    | 
 import_influx1 | loct1       | influxdb_svr | ("table" 'loct1')       | 
 import_influx1 | loct2       | influxdb_svr | ("table" 'loct2')       | 
 import_influx1 | pagg_tab_p1 | influxdb_svr | ("table" 'pagg_tab_p1') | 
 import_influx1 | pagg_tab_p2 | influxdb_svr | ("table" 'pagg_tab_p2') | 
 import_influx1 | pagg_tab_p3 | influxdb_svr | ("table" 'pagg_tab_p3') | 
(14 rows)

\d import_influx1.*
                        Foreign table "import_influx1.T1"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 C1     | bigint                   |           |          |         | 
 c2     | bigint                   |           |          |         | 
 c3     | text                     |           |          |         | 
 c6     | text                     |           |          |         | 
 c7     | text                     |           |          |         | 
 c8     | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'T1')

                        Foreign table "import_influx1.T2"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 C1     | bigint                   |           |          |         | 
 c2     | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'T2')

                        Foreign table "import_influx1.T3"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 c1     | bigint                   |           |          |         | 
 c2     | bigint                   |           |          |         | 
 c3     | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'T3')

                        Foreign table "import_influx1.T4"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 c1     | bigint                   |           |          |         | 
 c2     | bigint                   |           |          |         | 
 c3     | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'T4')

                        Foreign table "import_influx1.T5"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 c1     | bigint                   |           |          |         | 
 c2     | bigint                   |           |          |         | 
 c3     | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'T5')

                     Foreign table "import_influx1.fprt1_p1"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | bigint                   |           |          |         | 
 c      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'fprt1_p1')

                     Foreign table "import_influx1.fprt1_p2"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | bigint                   |           |          |         | 
 c      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'fprt1_p2')

                     Foreign table "import_influx1.fprt2_p1"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | bigint                   |           |          |         | 
 c      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'fprt2_p1')

                     Foreign table "import_influx1.fprt2_p2"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | bigint                   |           |          |         | 
 c      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'fprt2_p2')

                       Foreign table "import_influx1.loct1"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'loct1')

                       Foreign table "import_influx1.loct2"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'loct2')

                    Foreign table "import_influx1.pagg_tab_p1"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | bigint                   |           |          |         | 
 c      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'pagg_tab_p1')

                    Foreign table "import_influx1.pagg_tab_p2"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | bigint                   |           |          |         | 
 c      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'pagg_tab_p2')

                    Foreign table "import_influx1.pagg_tab_p3"
 Column |           Type           | Collation | Nullable | Default | FDW options 
--------+--------------------------+-----------+----------+---------+-------------
 time   | timestamp with time zone |           |          |         | 
 a      | bigint                   |           |          |         | 
 b      | bigint                   |           |          |         | 
 c      | text                     |           |          |         | 
Server: influxdb_svr
FDW options: ("table" 'pagg_tab_p3')

-- Check LIMIT TO and EXCEPT
CREATE SCHEMA import_influx2;
IMPORT FOREIGN SCHEMA public LIMIT TO ("T1", loct, nonesuch)
  FROM SERVER influxdb_svr INTO import_influx2;
\det+ import_influx2.*
                        List of foreign tables
     Schema     | Table |    Server    |  FDW options   | Description 
----------------+-------+--------------+----------------+-------------
 import_influx2 | T1    | influxdb_svr | ("table" 'T1') | 
(1 row)

IMPORT FOREIGN SCHEMA public EXCEPT ("T1", loct, nonesuch)
  FROM SERVER influxdb_svr INTO import_influx2;
\det+ import_influx2.*
                               List of foreign tables
     Schema     |    Table    |    Server    |       FDW options       | Description 
----------------+-------------+--------------+-------------------------+-------------
 import_influx2 | T1          | influxdb_svr | ("table" 'T1')          | 
 import_influx2 | T2          | influxdb_svr | ("table" 'T2')          | 
 import_influx2 | T3          | influxdb_svr | ("table" 'T3')          | 
 import_influx2 | T4          | influxdb_svr | ("table" 'T4')          | 
 import_influx2 | T5          | influxdb_svr | ("table" 'T5')          | 
 import_influx2 | fprt1_p1    | influxdb_svr | ("table" 'fprt1_p1')    | 
 import_influx2 | fprt1_p2    | influxdb_svr | ("table" 'fprt1_p2')    | 
 import_influx2 | fprt2_p1    | influxdb_svr | ("table" 'fprt2_p1')    | 
 import_influx2 | fprt2_p2    | influxdb_svr | ("table" 'fprt2_p2')    | 
 import_influx2 | loct1       | influxdb_svr | ("table" 'loct1')       | 
 import_influx2 | loct2       | influxdb_svr | ("table" 'loct2')       | 
 import_influx2 | pagg_tab_p1 | influxdb_svr | ("table" 'pagg_tab_p1') | 
 import_influx2 | pagg_tab_p2 | influxdb_svr | ("table" 'pagg_tab_p2') | 
 import_influx2 | pagg_tab_p3 | influxdb_svr | ("table" 'pagg_tab_p3') | 
(14 rows)

-- Assorted error cases
IMPORT FOREIGN SCHEMA public FROM SERVER influxdb_svr INTO import_influx2;
ERROR:  relation "T1" already exists
CONTEXT:  importing foreign table "T1"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER influxdb_svr INTO import_influx2; -- same as 'public'
ERROR:  relation "T1" already exists
CONTEXT:  importing foreign table "T1"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER influxdb_svr INTO notthere;
ERROR:  schema "notthere" does not exist
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER nowhere INTO notthere;
ERROR:  server "nowhere" does not exist
-- ===================================================================
-- test partitionwise joins
-- ===================================================================
SET enable_partitionwise_join=on;
CREATE TABLE fprt1 (a int, b int, c text) PARTITION BY RANGE(a);
CREATE FOREIGN TABLE ftprt1_p1 PARTITION OF fprt1 FOR VALUES FROM (0) TO (250)
	SERVER influxdb_svr OPTIONS (table 'fprt1_p1');
CREATE FOREIGN TABLE ftprt1_p2 PARTITION OF fprt1 FOR VALUES FROM (250) TO (500)
	SERVER influxdb_svr OPTIONS (TABLE 'fprt1_p2');
-- SELECT * FROM ftprt1_p1 OFFSET 100 LIMIT 50;
-- SELECT * FROM ftprt1_p2 OFFSET 100 LIMIT 50;
CREATE TABLE fprt2 (a int, b int, c text) PARTITION BY RANGE(b);
CREATE FOREIGN TABLE ftprt2_p1 (a int, b int, c text)
	SERVER influxdb_svr OPTIONS (table 'fprt2_p1');
ALTER TABLE fprt2 ATTACH PARTITION ftprt2_p1 FOR VALUES FROM (0) TO (250);
CREATE FOREIGN TABLE ftprt2_p2 PARTITION OF fprt2 FOR VALUES FROM (250) TO (500)
	SERVER influxdb_svr OPTIONS (table 'fprt2_p2');
-- inner join three tables
EXPLAIN (COSTS OFF)
SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Sort Key: t1.a, t3.c
   ->  Append
         ->  Hash Join
               Hash Cond: (t2.b = t1.a)
               ->  Foreign Scan on ftprt2_p1 t2
               ->  Hash
                     ->  Hash Join
                           Hash Cond: (t3.a = t1.a)
                           ->  Foreign Scan on ftprt1_p1 t3
                           ->  Hash
                                 ->  Foreign Scan on ftprt1_p1 t1
         ->  Hash Join
               Hash Cond: (t2_1.b = t1_1.a)
               ->  Foreign Scan on ftprt2_p2 t2_1
               ->  Hash
                     ->  Hash Join
                           Hash Cond: (t3_1.a = t1_1.a)
                           ->  Foreign Scan on ftprt1_p2 t3_1
                           ->  Hash
                                 ->  Foreign Scan on ftprt1_p2 t1_1
(21 rows)

SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
  a  |  b  |  c   
-----+-----+------
   0 |   0 | 0000
 150 | 150 | 0003
 250 | 250 | 0005
 400 | 400 | 0008
(4 rows)

-- left outer join + nullable clasue
EXPLAIN (COSTS OFF)
SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Sort
   Sort Key: t1.a, ftprt2_p1.b, ftprt2_p1.c
   ->  Append
         ->  Merge Left Join
               Merge Cond: ((t1.a = ftprt2_p1.b) AND (t1.b = ftprt2_p1.a))
               ->  Sort
                     Sort Key: t1.a, t1.b
                     ->  Foreign Scan on ftprt1_p1 t1
               ->  Sort
                     Sort Key: ftprt2_p1.b, ftprt2_p1.a
                     ->  Foreign Scan on ftprt2_p1
(11 rows)

SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
 a | b |  c   
---+---+------
 0 | 0 | 0000
 2 |   | 
 4 |   | 
 6 | 6 | 0000
 8 |   | 
(5 rows)

-- with whole-row reference; partitionwise join does not apply
EXPLAIN (COSTS OFF)
SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
                       QUERY PLAN                       
--------------------------------------------------------
 Sort
   Sort Key: ((t1.*)::fprt1), ((t2.*)::fprt2)
   ->  Hash Full Join
         Hash Cond: (t1.a = t2.b)
         ->  Append
               ->  Foreign Scan on ftprt1_p1 t1
               ->  Foreign Scan on ftprt1_p2 t1_1
         ->  Hash
               ->  Append
                     ->  Foreign Scan on ftprt2_p1 t2
                     ->  Foreign Scan on ftprt2_p2 t2_1
(11 rows)

SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
       wr       |       wr       
----------------+----------------
 (0,0,0000)     | (0,0,0000)
 (50,50,0001)   | 
 (100,100,0002) | 
 (150,150,0003) | (150,150,0003)
 (200,200,0004) | 
 (250,250,0005) | (250,250,0005)
 (300,300,0006) | 
 (350,350,0007) | 
 (400,400,0008) | (400,400,0008)
 (450,450,0009) | 
                | (75,75,0001)
                | (225,225,0004)
                | (325,325,0006)
                | (475,475,0009)
(14 rows)

-- join with lateral reference
EXPLAIN (COSTS OFF)
SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Sort Key: t1.a, t1.b
   ->  Append
         ->  Hash Join
               Hash Cond: ((t2.b = t1.a) AND (t2.a = t1.b))
               ->  Foreign Scan on ftprt2_p1 t2
               ->  Hash
                     ->  Foreign Scan on ftprt1_p1 t1
         ->  Hash Join
               Hash Cond: ((t2_1.b = t1_1.a) AND (t2_1.a = t1_1.b))
               ->  Foreign Scan on ftprt2_p2 t2_1
               ->  Hash
                     ->  Foreign Scan on ftprt1_p2 t1_1
(13 rows)

SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
  a  |  b  
-----+-----
   0 |   0
 150 | 150
 250 | 250
 400 | 400
(4 rows)

-- with PHVs, partitionwise join selected but no join pushdown
EXPLAIN (COSTS OFF)
SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
                      QUERY PLAN                      
------------------------------------------------------
 Sort
   Sort Key: ftprt1_p1.a, ftprt2_p1.b
   ->  Append
         ->  Hash Full Join
               Hash Cond: (ftprt1_p1.a = ftprt2_p1.b)
               ->  Foreign Scan on ftprt1_p1
               ->  Hash
                     ->  Foreign Scan on ftprt2_p1
         ->  Hash Full Join
               Hash Cond: (ftprt1_p2.a = ftprt2_p2.b)
               ->  Foreign Scan on ftprt1_p2
               ->  Hash
                     ->  Foreign Scan on ftprt2_p2
(13 rows)

SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
  a  |  phv   |  b  |  phv   
-----+--------+-----+--------
   0 | t1_phv |   0 | t2_phv
  50 | t1_phv |     | 
 100 | t1_phv |     | 
 150 | t1_phv | 150 | t2_phv
 200 | t1_phv |     | 
 250 | t1_phv | 250 | t2_phv
 300 | t1_phv |     | 
 350 | t1_phv |     | 
 400 | t1_phv | 400 | t2_phv
 450 | t1_phv |     | 
     |        |  75 | t2_phv
     |        | 225 | t2_phv
     |        | 325 | t2_phv
     |        | 475 | t2_phv
(14 rows)

-- test FOR UPDATE; partitionwise join does not apply
EXPLAIN (COSTS OFF)
SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
                          QUERY PLAN                          
--------------------------------------------------------------
 LockRows
   ->  Sort
         Sort Key: t1.a
         ->  Hash Join
               Hash Cond: (t2.b = t1.a)
               ->  Append
                     ->  Foreign Scan on ftprt2_p1 t2
                     ->  Foreign Scan on ftprt2_p2 t2_1
               ->  Hash
                     ->  Append
                           ->  Foreign Scan on ftprt1_p1 t1
                           ->  Foreign Scan on ftprt1_p2 t1_1
(12 rows)

SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
  a  |  b  
-----+-----
   0 |   0
 150 | 150
 250 | 250
 400 | 400
(4 rows)

RESET enable_partitionwise_join;
-- ===================================================================
-- test partitionwise aggregates
-- ===================================================================
CREATE TABLE pagg_tab (t int, a int, b int, c text) PARTITION BY RANGE(a);
-- Create foreign partitions
CREATE FOREIGN TABLE fpagg_tab_p1 PARTITION OF pagg_tab FOR VALUES FROM (0) TO (10) SERVER influxdb_svr OPTIONS (table 'pagg_tab_p1');
CREATE FOREIGN TABLE fpagg_tab_p2 PARTITION OF pagg_tab FOR VALUES FROM (10) TO (20) SERVER influxdb_svr OPTIONS (table 'pagg_tab_p2');;
CREATE FOREIGN TABLE fpagg_tab_p3 PARTITION OF pagg_tab FOR VALUES FROM (20) TO (30) SERVER influxdb_svr2 OPTIONS (table 'pagg_tab_p3');;
-- When GROUP BY clause matches with PARTITION KEY.
-- Plan with partitionwise aggregates is disabled
SET enable_partitionwise_aggregate TO false;
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                      QUERY PLAN                       
-------------------------------------------------------
 Sort
   Sort Key: fpagg_tab_p1.a
   ->  HashAggregate
         Group Key: fpagg_tab_p1.a
         Filter: (avg(fpagg_tab_p1.b) < '22'::numeric)
         ->  Append
               ->  Foreign Scan on fpagg_tab_p1
               ->  Foreign Scan on fpagg_tab_p2
               ->  Foreign Scan on fpagg_tab_p3
(9 rows)

-- Plan with partitionwise aggregates is enabled
SET enable_partitionwise_aggregate TO true;
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort
   Sort Key: fpagg_tab_p1.a
   ->  Append
         ->  HashAggregate
               Group Key: fpagg_tab_p1.a
               Filter: (avg(fpagg_tab_p1.b) < '22'::numeric)
               ->  Foreign Scan on fpagg_tab_p1
         ->  HashAggregate
               Group Key: fpagg_tab_p2.a
               Filter: (avg(fpagg_tab_p2.b) < '22'::numeric)
               ->  Foreign Scan on fpagg_tab_p2
         ->  HashAggregate
               Group Key: fpagg_tab_p3.a
               Filter: (avg(fpagg_tab_p3.b) < '22'::numeric)
               ->  Foreign Scan on fpagg_tab_p3
(15 rows)

SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
 a  | sum  | min | count 
----+------+-----+-------
  0 | 2000 |   0 |   100
  1 | 2100 |   1 |   100
 10 | 2000 |   0 |   100
 11 | 2100 |   1 |   100
 20 | 2000 |   0 |   100
 21 | 2100 |   1 |   100
(6 rows)

-- Check with whole-row reference
-- Should have all the columns in the target list for the given relation
EXPLAIN (VERBOSE, COSTS OFF)
SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Sort
   Output: t1.a, (count(((t1.*)::pagg_tab)))
   Sort Key: t1.a
   ->  Append
         ->  HashAggregate
               Output: t1.a, count(((t1.*)::pagg_tab))
               Group Key: t1.a
               Filter: (avg(t1.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p1 t1
                     Output: t1.a, t1.*, t1.b
                     InfluxDB query: SELECT "t", "a", "b", "c" FROM "pagg_tab_p1"
         ->  HashAggregate
               Output: t1_1.a, count(((t1_1.*)::pagg_tab))
               Group Key: t1_1.a
               Filter: (avg(t1_1.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p2 t1_1
                     Output: t1_1.a, t1_1.*, t1_1.b
                     InfluxDB query: SELECT "t", "a", "b", "c" FROM "pagg_tab_p2"
         ->  HashAggregate
               Output: t1_2.a, count(((t1_2.*)::pagg_tab))
               Group Key: t1_2.a
               Filter: (avg(t1_2.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p3 t1_2
                     Output: t1_2.a, t1_2.*, t1_2.b
                     InfluxDB query: SELECT "t", "a", "b", "c" FROM "pagg_tab_p3"
(25 rows)

SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
 a  | count 
----+-------
  0 |   100
  1 |   100
 10 |   100
 11 |   100
 20 |   100
 21 |   100
(6 rows)

-- When GROUP BY clause does not match with PARTITION KEY.
EXPLAIN (COSTS OFF)
SELECT b, avg(a), max(a), count(*) FROM pagg_tab GROUP BY b HAVING sum(a) < 700 ORDER BY 1;
                      QUERY PLAN                      
------------------------------------------------------
 Finalize GroupAggregate
   Group Key: fpagg_tab_p1.b
   Filter: (sum(fpagg_tab_p1.a) < 700)
   ->  Sort
         Sort Key: fpagg_tab_p1.b
         ->  Append
               ->  Partial HashAggregate
                     Group Key: fpagg_tab_p1.b
                     ->  Foreign Scan on fpagg_tab_p1
               ->  Partial HashAggregate
                     Group Key: fpagg_tab_p2.b
                     ->  Foreign Scan on fpagg_tab_p2
               ->  Partial HashAggregate
                     Group Key: fpagg_tab_p3.b
                     ->  Foreign Scan on fpagg_tab_p3
(15 rows)

-- Clean-up
DROP USER MAPPING FOR public SERVER testserver1;
DROP USER MAPPING FOR CURRENT_USER SERVER influxdb_svr;
DROP USER MAPPING FOR CURRENT_USER SERVER influxdb_svr2;
DROP SERVER testserver1 CASCADE;
DROP SERVER influxdb_svr CASCADE;
NOTICE:  drop cascades to 53 other objects
DETAIL:  drop cascades to foreign table "S 1"."T1"
drop cascades to foreign table "S 1"."T2"
drop cascades to foreign table "S 1"."T3"
drop cascades to foreign table "S 1"."T4"
drop cascades to foreign table "S 1"."T5"
drop cascades to foreign table "S 1".fprt1_p1
drop cascades to foreign table "S 1".fprt1_p2
drop cascades to foreign table "S 1".fprt2_p1
drop cascades to foreign table "S 1".fprt2_p2
drop cascades to foreign table "S 1".loct1
drop cascades to foreign table "S 1".loct2
drop cascades to foreign table "S 1".pagg_tab_p1
drop cascades to foreign table "S 1".pagg_tab_p2
drop cascades to foreign table "S 1".pagg_tab_p3
drop cascades to foreign table ft1
drop cascades to foreign table ft2
drop cascades to foreign table ft4
drop cascades to foreign table ft5
drop cascades to foreign table ft3
drop cascades to foreign table import_influx1."T1"
drop cascades to foreign table import_influx1."T2"
drop cascades to foreign table import_influx1."T3"
drop cascades to foreign table import_influx1."T4"
drop cascades to foreign table import_influx1."T5"
drop cascades to foreign table import_influx1.fprt1_p1
drop cascades to foreign table import_influx1.fprt1_p2
drop cascades to foreign table import_influx1.fprt2_p1
drop cascades to foreign table import_influx1.fprt2_p2
drop cascades to foreign table import_influx1.loct1
drop cascades to foreign table import_influx1.loct2
drop cascades to foreign table import_influx1.pagg_tab_p1
drop cascades to foreign table import_influx1.pagg_tab_p2
drop cascades to foreign table import_influx1.pagg_tab_p3
drop cascades to foreign table import_influx2."T1"
drop cascades to foreign table import_influx2."T2"
drop cascades to foreign table import_influx2."T3"
drop cascades to foreign table import_influx2."T4"
drop cascades to foreign table import_influx2."T5"
drop cascades to foreign table import_influx2.fprt1_p1
drop cascades to foreign table import_influx2.fprt1_p2
drop cascades to foreign table import_influx2.fprt2_p1
drop cascades to foreign table import_influx2.fprt2_p2
drop cascades to foreign table import_influx2.loct1
drop cascades to foreign table import_influx2.loct2
drop cascades to foreign table import_influx2.pagg_tab_p1
drop cascades to foreign table import_influx2.pagg_tab_p2
drop cascades to foreign table import_influx2.pagg_tab_p3
drop cascades to foreign table ftprt1_p1
drop cascades to foreign table ftprt1_p2
drop cascades to foreign table ftprt2_p1
drop cascades to foreign table ftprt2_p2
drop cascades to foreign table fpagg_tab_p1
drop cascades to foreign table fpagg_tab_p2
DROP SERVER influxdb_svr2 CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to foreign table ft6
drop cascades to foreign table fpagg_tab_p3
DROP EXTENSION influxdb_fdw CASCADE;
